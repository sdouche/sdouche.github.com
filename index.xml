<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Ruminations From a Tortured Mind </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://douche.name/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Mon, 16 May 2016 01:16:00 &#43;0100</updated>
    
    <item>
      <title>Conseils pour monter une équipe</title>
      <link>http://douche.name/blog/conseils-pour-monter-une-equipe/</link>
      <pubDate>Mon, 16 May 2016 01:16:00 &#43;0100</pubDate>
      
      <guid>http://douche.name/blog/conseils-pour-monter-une-equipe/</guid>
      <description>

&lt;p&gt;Cela fait maintenant une dizaine d&amp;rsquo;années que je monte des équipes. J&amp;rsquo;en ai tiré une ligne de conduite que je vous propose dans ce billet.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Votre équipe doit vous survivre&lt;/h2&gt;

&lt;p&gt;A la création d&amp;rsquo;une équipe, je pars du postulat suivant : dans quelques mois (généralement de 12 à 36 mois selon la difficulté à monter l&amp;rsquo;équipe), je n&amp;rsquo;en serai plus le manager. Le fait de se le dire dès sa conception permet de graver dans ses &lt;strong&gt;gènes&lt;/strong&gt; l&amp;rsquo;apprentissage de son autonomie, d&amp;rsquo;une création d&amp;rsquo;une vision à long terme et de sa légitimité pour y aller. Le mot anglais &lt;strong&gt;enpowerment&lt;/strong&gt; (difficilement traduisible) résume bien cette pensée. Beaucoup de vos actions et de vos choix découleront de ce engagement initial. Posez-vous cette question : &lt;em&gt;Est ce que mon équipe peut non seulement fonctionner mais &lt;strong&gt;grandir&lt;/strong&gt; sans moi ?&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Embauchez des gens plus intelligents que vous&lt;/h2&gt;

&lt;p&gt;Monter une équipe autonome nécessite chez ses membres un ensemble de compétences humaines et techniques. Plus grandes elles seront, meilleure sera votre équipe. Voyez haut, et surtout plus haut que vous. A chaque entretien je me pose ces questions : &lt;em&gt;Est-il meilleur que moi ? Apporte t-il quelque chose que je n&amp;rsquo;ai pas ? Une vision ? Des compétences ?&lt;/em&gt; Chaque personne doit compléter l&amp;rsquo;équipe et la tirer vers le haut. &lt;strong&gt;Je dois devenir inutile&lt;/strong&gt;. Il faudra aussi bien sûr des compétences d&amp;rsquo;organisation et de management mais c&amp;rsquo;est justement à vous, manager, de leur donner ses compétences manquantes.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Votre relation ne doit pas être hierarchique&lt;/h2&gt;

&lt;p&gt;Les points précédents fonctionneront mieux si dès le départ vous basez votre relation avec chaque membre de l&amp;rsquo;équipe sur l&amp;rsquo;humain et la compétence. S&amp;rsquo;ils ne vous voient que sur l&amp;rsquo;aspect hierarchique, alors votre équipe ne progressera pas aussi vite qu&amp;rsquo;elle pourrait le faire. Elle doit vous challenger, vous titiller, voir même par moment vous agaçer. Elle se retiendra de le faire si elle a en mémoire que vous êtes le « chef », celui qui décide de l&amp;rsquo;avancement.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Le resumé que je pourrais en tirer tient en une expression : &lt;strong&gt;egoless manager&lt;/strong&gt;. Chaque point demande en filigramme d&amp;rsquo;être capable d&amp;rsquo;être un serviteur pour l&amp;rsquo;équipe : votre égo sera votre plus grande faiblesse, votre humilité une alliée de choix. Et c&amp;rsquo;est justement le subtil équilibre entre servant et leader qui rend si dur le rôle de manager. Autre point, cela ne signifie pas un manque de fierté ou de s&amp;rsquo;autoflageller tous les matins, cela veut juste dire que votre mission est avant tout de servir au mieux l&amp;rsquo;organisation en proposant l&amp;rsquo;équipe la plus compétente, cohérente et utile possible. Vous serez alors reconnu dans toute l&amp;rsquo;entreprise comme un excellent manager. N&amp;rsquo;est ce pas ce que vous souhaitez ?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mon arrivée chez un éditeur logiciel</title>
      <link>http://douche.name/blog/mon-arrivee-chez-un-editeur/</link>
      <pubDate>Wed, 29 Jul 2015 09:00:00 CEST</pubDate>
      
      <guid>http://douche.name/blog/mon-arrivee-chez-un-editeur/</guid>
      <description>&lt;p&gt;Dans une ancienne vie, j&amp;rsquo;ai travaillé pour un éditeur logiciel. Il est temps de vous raconter le début de cet aventure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : je parle d&amp;rsquo;un temps ancien, les choses ont bien changées depuis.&lt;/p&gt;

&lt;p&gt;A cette époque, je travaille dans une SSII et je cherche depuis quelques mois à changer de poste. Comme on dit dans les milieux autorisés, je suis en &lt;em&gt;recherche active&lt;/em&gt;. Mes dirigeants veulent que je me casse mais sans me licencier. Parce qu&amp;rsquo;en plus d&amp;rsquo;être cons, ce sont aussi des pingres. Bref, je cherche. Cela fait des années que j&amp;rsquo;ai abandonné l&amp;rsquo;idée de me remettre au développement logiciel, n&amp;rsquo;aimant pas les langages en vue comme PHP ou Java. Quant aux technos Microsoft, c&amp;rsquo;est hors de question. Les possibilités
sont donc limitées. Je cherche donc du coté de l&amp;rsquo;admin système Unix, ou de la
gestion de projet. Au cas où, je vais quand même regarder les offres Python en
France : j&amp;rsquo;en trouve cinq sur Monster. Je vais répondre à quatre. La cinquième étant pour un poste de junior. Vous comprendrez à la fin pourquoi j&amp;rsquo;en parle. Pour la petite histoire, je regarde aussi les offres d&amp;rsquo;emplois US pour développeur Python : les entreprises sont la NASA, Disney, Google, ILM&amp;hellip; Je pleure.&lt;/p&gt;

&lt;p&gt;Parallèlement, je suis contacté par un chasseur de tête qui a vu mon profil sur
Viadeo, profil que j&amp;rsquo;ai activé peu de temps avant. Ses mots clé étaient
&lt;strong&gt;Python&lt;/strong&gt; et &lt;strong&gt;Scrum&lt;/strong&gt; (j&amp;rsquo;entends d&amp;rsquo;ici les rires de certains, private joke).
Et à l&amp;rsquo;époque, il n&amp;rsquo;y avait pas beaucoup de gens avec ces mots clés sur
leur CV. Bon contact au téléphone, on décide de se rencontrer. J&amp;rsquo;étais déjà à
l&amp;rsquo;époque dans mon trip &lt;em&gt;entreprise apprenante&lt;/em&gt;, &lt;em&gt;qualité organisationnelle&lt;/em&gt; et
tout le toutim. Je suis donc franco sur ce que je cherche. L&amp;rsquo;entretien se passe
bien, le feeling passe, ils comprennent vite et plutôt bien (et pour en avoir rencontré une palanquée de chasseurs de tête, j&amp;rsquo;étais assez surpris). Ils me rappelleront plus tard pour me dire que la boite veut me voir.&lt;/p&gt;

&lt;p&gt;La rencontre avec mes 2 futurs boss se passent plutôt bien. Je suis le premier
candidat. On parle de développement logiciel et d&amp;rsquo;agilité. Le mot Scrum revient
assez souvent dans leur bouche et j&amp;rsquo;apprendrais plus tard que c&amp;rsquo;est un bon pote
du PDG, lui aussi serial-entrepreneur qui est passé à Scrum quelques temps
auparavant, et qui lui a conseillé. On discute à bâton rompu sur le profil
recherché : une personne qui connait bien Python puisque c&amp;rsquo;est la techno
dominante, Linux, les Logiciels Libres, l&amp;rsquo;agilité et qui a une expérience en
management. Et comme il y avait tout ça sur mon CV (utilisateur de Linux depuis 95, Python 99, XP 2001 et «manager» du pôle Logiciel Libre dans ma boite de l&amp;rsquo;époque), ça tombait bien.&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;apprends aussi que l&amp;rsquo;entreprise est en grande difficulté avec son nouveau
développement, qui dure depuis des mois sans voir le bout du tunnel. Et
pour corser le tout, la relation avec l&amp;rsquo;équipe technique est très tendue et la
tension palpable. Ce qui rend le boulot très intéressant mais difficile : ce
genre de souci est le reflet d&amp;rsquo;une organisation défaillante (&lt;strong&gt;le produit
est le résultat de son organisation&lt;/strong&gt; est une de mes phrases préférées),
ce qui sous entend des problèmes organisationnels, techniques et humains à
résoudre. C&amp;rsquo;est d&amp;rsquo;ailleurs la principale information que je noterais sur mon
Mindmap : que se cache t&amp;rsquo;il vraiment derrière ce problème de développement ? Je sentais qu&amp;rsquo;on me disait pas tout, et d&amp;rsquo;ailleurs j&amp;rsquo;avais noté un détail qui en disait long à mes yeux : les locaux étaient constitués principalement de 2 pièces. Une petite qui contenait les commerciaux, et une grande avec les développeurs, le support, l&amp;rsquo;avant vente et l&amp;rsquo;office. Et où était exactement les développeurs ?  En plein milieu de la pièce ! Aucune protection contre les allées venues, ni le bruit. Ce n&amp;rsquo;est pas comme si Tom DeMarco avait écrit dans son livre &lt;em&gt;Peopleware&lt;/em&gt; qu&amp;rsquo;il y a une relation directe entre productivité d&amp;rsquo;un développeur et la qualité de son environnement.  Livre écrit en&amp;hellip; 1987.&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;aurais un deuxième entretien, puis rapidement une réponse positive.
J&amp;rsquo;apprendrais plus tard que j&amp;rsquo;étais le plus crédible des candidats concernant
l&amp;rsquo;agilité mais je ne suis pas sûr que cela soit vraiment un compliment.
Je vais en fait me rendre compte en moins de six mois que je ne sais rien (la
lecture de livres, aussi nombreuses soient-elles n&amp;rsquo;apportent pas d&amp;rsquo;expérience,
mais juste des voies à explorer), et il me faudra trois ans pour me construire
une expérience qui tienne la route. Mais ceci est une autre histoire.&lt;/p&gt;

&lt;p&gt;Je me donne trois ans pour redresser la barre : non seulement sortir le
nouveau produit mais rendre la R&amp;amp;D capable de livrer régulièrement des releases
de qualité. Et pour moi trois ans c&amp;rsquo;est loin ! A cette époque, j&amp;rsquo;avais fait
dix sociétés en sept ans (oui 10), la plupart quittée car je n&amp;rsquo;étais pas du tout adapté au modèle de pensée dominant. Faut dire que j&amp;rsquo;avais fait dix
SSII, ceci explique en partie cela.&lt;/p&gt;

&lt;p&gt;Mon poste est officiellement celui de&lt;em&gt;coach R&amp;amp;D&lt;/em&gt;. Au bout de ces trois
ans, je me poserai la question de mon utilité dans l&amp;rsquo;organisation. Trois ans pour redresser une société de développement au fond du gouffre était un challenge intéressant à mes yeux :).&lt;/p&gt;

&lt;p&gt;Avant d&amp;rsquo;aller plus loin et de vous raconter mes premières semaines, je vais vous rappeler quelques points :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;C&amp;rsquo;est la 1ere fois que je travaille chez un éditeur logiciel. J&amp;rsquo;ai bien eu
une toute petite expérience dans une boite qui mixait éditeur et SSII (une startup où j&amp;rsquo;étais le seul techos) mais elle faisait éditeur sur son &lt;em&gt;temps libre&lt;/em&gt; (une SSII quoi). Et puis c&amp;rsquo;était y&amp;rsquo;a fort longtemps.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C&amp;rsquo;est la 1ere fois que je travaille comme coach. J&amp;rsquo;ai bien une
expérience &lt;em&gt;livresque&lt;/em&gt; de l&amp;rsquo;agilité mais je ne peux pas vraiment dire que
c&amp;rsquo;est une expérience terrain. J&amp;rsquo;ai bossé en SSII hein, ça ne fait pas d&amp;rsquo;agilité. Mon boulot précédent de responsable du pôle Logiciel Libre m&amp;rsquo;a donné un premier aperçu du management, mais dans un cadre SSII, cela se résume plutôt à de l&amp;rsquo;avancement de tâches.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C&amp;rsquo;est la première fois que je travaille dans le domaine d&amp;rsquo;expertise de la société.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cela fait longtemps que je ne développe plus à plein temps, ayant au travers
des années multiplié les expériences : responsable technique, développeur,
administrateur système, administrateur sécurité, chef de projet, etc. le peu
de développement effectué ces derniers années sont plutôt de l&amp;rsquo;intégration.
Je n&amp;rsquo;ai pas l&amp;rsquo;expérience requise pour prendre le développement à 100% sur &lt;em&gt;mes épaules&lt;/em&gt;, je sais donc pertinemment que je dois m&amp;rsquo;appuyer sur une équipe de développeurs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Autant dire que je n&amp;rsquo;ai pas une grande expérience du boulot qui m&amp;rsquo;est confié et
que je pars d&amp;rsquo;assez bas, mais heureusement pour moi l&amp;rsquo;environnement est assez
familier. Si j&amp;rsquo;avais dû travailler sous Windows en Java en mode RUP,
le problème aurait été tout autre :). Et puis j&amp;rsquo;adore apprendre, sans compter ma veille permanente dans pas mal de domaines depuis 10 ans qui peut m&amp;rsquo;aider.&lt;/p&gt;

&lt;p&gt;Maintenant parlons de la &lt;strong&gt;première semaine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Comme je pouvais en douter, c&amp;rsquo;est l&amp;rsquo;organisation dans son ensemble qui pose le
plus gros souci : peu tournée vers le développement, elle se focalise sur la
réussite commerciale à court terme. Le résultat s&amp;rsquo;en ressent : développement
baclé, fonctionnalités peu étudiées&amp;hellip; La disposition physique que j&amp;rsquo;évoquais
plus haut était révélatrice : les commerciaux vont voir sans cesse les
développeurs pour leurs demander des fonctionnalités et des corrections. Le
commercial est roi et le développeur pédale. La nouvelle version  est promise depuis un an déjà, les clients demandant sans cesse où en est le développement. Autre signe révélateur, les commerciaux (et le DG) rigole assez souvent du fait de «vendre du vent». Jamais su si c&amp;rsquo;était une mauvaise blague ou une putain de fierté mal placée de commercial, mais j&amp;rsquo;avais une envie de foutre des baffes.&lt;/p&gt;

&lt;p&gt;Ces pratiques ne m&amp;rsquo;étonne pas car elles sont sous jacentes d&amp;rsquo;une certaine
mentalité que je rencontrais assez fréquemment dans mes postes précédents : une
incompréhension forte du développement logiciel, avec son cortège d&amp;rsquo;erreurs
(profil des développeurs, absence de refactoring et des tests, manque de vision
partagée, etc) et une absence de réflexion organisationnelle. Pour savoir tout
ce qu&amp;rsquo;il ne faut pas faire, rien de mieux que la SSII (malheureusement, savoir
ce qui ne faut pas faire n&amp;rsquo;apprend &lt;strong&gt;absolument pas&lt;/strong&gt; à savoir faire, comme je
l&amp;rsquo;entends trop souvent. Ôtez vous une bonne fois pour toute cette connerie de
votre tête). L&amp;rsquo;équipe de développement du nouveau produit est constitué de cinq personnes. Un expérimenté qui fait du Python, un petit jeune qui fait du C, un stagiaire en alternance touche à tout, un «vieux» qui s&amp;rsquo;est reconverti au développement logiciel et le directeur R&amp;amp;D, à l&amp;rsquo;origine du produit. Je m&amp;rsquo;aperçois très vite du climat délétère. Les deux premiers sont en confrontation directeavec le management, en position de «combat». Ils s&amp;rsquo;amusent par exemple à les critiquer violemment en réunion R&amp;amp;D en sachant parfaitement qu&amp;rsquo;ils seront entendus. Attitude incompréhensible alors qu&amp;rsquo;ils pouvaient se barrer et trouver du boulot ailleurs assez facilement et gagner un bien meilleur salaire. Avec le recul, je ne comprends toujours pas. Les gens s&amp;rsquo;entêtent des fois dans des voies sans issues et préfèrent se briser sur des rochers plutôt que rebondir.&lt;/p&gt;

&lt;p&gt;Voici une autre anecdote : Il y avait plusieurs balles dans la pièce (vous
savez, ces conneries de balles soit disant déstressantes), balles qu&amp;rsquo;ils
s&amp;rsquo;amusaient à s&amp;rsquo;envoyer les uns sur les autres. A plusieurs reprise, je m&amp;rsquo;en
suis prise une sur la figure. Je me souviens encore me demander si j&amp;rsquo;allais
pas en prendre un et lui exploser la gueule.&lt;/p&gt;

&lt;p&gt;D&amp;rsquo;ailleurs cela n&amp;rsquo;a pas manqué, le responsable R&amp;amp;D et le jeune en sont presque
arrivés aux mains lors d&amp;rsquo;une réunion en tête à tête. Le responsable était
d&amp;rsquo;ailleurs au bout des nerfs, prenait des cachets pour dormir et on sentait
bien qu&amp;rsquo;il n&amp;rsquo;allait pas tenir longtemps. je passais d&amp;rsquo;ailleurs des heures chaque jour à l&amp;rsquo;écouter, tellement il était en souffrance. Il s&amp;rsquo;est énormément investi mais s&amp;rsquo;est rendu compte qu&amp;rsquo;il &lt;strong&gt;détestait&lt;/strong&gt; manager des développeurs. Il est du genre à tout prendre sur ses épaules mais c&amp;rsquo;était bien trop. Bon admin réseau, avec une réelle vision produit (qualité rare), il a échoué à créer une équipe de développement et à partager sa vision. Il avait échoué et le savait, ce qui le minait terriblement.&lt;/p&gt;

&lt;p&gt;Le stagiaire attendait patiemment son diplôme dans 3 mois pour se barrer. Bien
que stagiaire, il était la depuis des années car la société lui a payé en
partie ses études supérieures et avait donc une grande connaissance de
l&amp;rsquo;histoire du projet, ce qui était capital pour la réussite de ma démarche.
C&amp;rsquo;était le seul à avoir cette connaissance avec le responsable R&amp;amp;D, et si les
deux partent, je me retrouve vierge de toute connaissance du produit actuel.&lt;/p&gt;

&lt;p&gt;Et pour corser le tout, le dernier de la liste, c&amp;rsquo;est à dire le reconverti en
développeur est mauvais. J&amp;rsquo;ai voulu le tester en lui demandant de coder une
petit code Python d&amp;rsquo;envoi de mail, chose qui doit prendre 30 minutes en allant vite, une heure avec la doc. En cinq jours, il n&amp;rsquo;avait pas terminé. Il n&amp;rsquo;avait
même pas cherché sur PyPI (index des projets Python) qui ne connaissait
d&amp;rsquo;ailleurs pas.&lt;/p&gt;

&lt;p&gt;En ce qui concerne le produit actuellement vendu, il est tellement bancal que
le stagiaire à comme boulot de faire du support &lt;strong&gt;toute la journée&lt;/strong&gt; pour corriger l&amp;rsquo;application des clients (en prod donc) qui tombent en panne. Rassurant ! Je demande l&amp;rsquo;url du dépôt SVN pour voir le code, on me répond que «&lt;strong&gt;cela fait des mois que plus personnes ne commit dedans&lt;/strong&gt;». Ce qui veut dire qu&amp;rsquo;il n&amp;rsquo;existe aucune trace des modifications faites en prod. Chaque client à donc sa propre version. Une sorte de code personnalisé en sommes :). J’apprends donc que nos clients sont en «3.2 quelque chose».&lt;/p&gt;

&lt;p&gt;Pour coder, chacun à sa sonde et il n&amp;rsquo;y &lt;strong&gt;aucune procédure d&amp;rsquo;installation&lt;/strong&gt;.
Impossible donc de travailler sur sa machine directement ou de connaitre l&amp;rsquo;état
exact du sonde. En regardant directement une sonde, le code est principalement
en PHP. Mais du code PHP qui rendrait celui de PHPBB un sommet de qualité et de
perfection. La plupart du HTML est rendu par des &lt;em&gt;print&lt;/em&gt;, il y a même souvent du code PHP qui génère du JS qui génère du PHP qui génère du HTML ! Le reste est fait de scripts Python 2.3 ou 2.4 (en double voir triple exemplaires,
on ne sait pas qui est vraiment utilisé). Le tout lancé et relancé en
permanence par &lt;em&gt;daemontools&lt;/em&gt; car la plupart des scripts se plantent plusieurs
fois par jours. Car si le PHP était dans un état de délabrement avancé, c&amp;rsquo;était
aussi le cas du code Python. Je n&amp;rsquo;arrive pas à savoir comment certaines données sont calculées. La base MySQL tombe sans arrêt, ce qui fait perdre instantanément des données. L&amp;rsquo;ergonomie est disons&amp;hellip;l’œuvre de développeurs.Le résultat est donc un produit qui marche «on ne sait comment». Seul point positif (mais important), il est simple et accessible.&lt;/p&gt;

&lt;p&gt;Pour faire une release, ils utilisent un outil de création d&amp;rsquo;image : ils
appliquent les modifications sur une sonde puis enregistre une image. Il suffit
ensuite de déployer de nouvelles sondes pour travailler. Simple certes mais
faut être extrêmement vigilant et bien documenter chaque évolution. Comme
cela n&amp;rsquo;est pas fait, on ne sait pas reproduire l&amp;rsquo;image en question.  Ah et
pour corser le tout, c&amp;rsquo;est une &lt;em&gt;Debian Sarge&lt;/em&gt; bancale : impossible de toucher à
dpkg car &lt;strong&gt;des paquets sont cassés&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cerise sur le couscous, une version anglaise existe en plus de la version
française. i18n me direz vous ? Que nenni ! Ils ont fait la trad à coup
de sed ! Il existe donc &lt;strong&gt;deux bases de code&lt;/strong&gt;, une à jour en française
et une qui a un sérieux retard en anglais.&lt;/p&gt;

&lt;p&gt;Je me rends compte que le produit est dans un tel état qu&amp;rsquo;il sera
&lt;strong&gt;impossible de faire du substantielle évolution&lt;/strong&gt;. Il ne me reste que le code
de la nouvelle version pour me sauver d&amp;rsquo;un désastre annoncé. Cette fois ci il
existe un SVN à jour, avec un répertoire par&amp;hellip; développeur. Cela retranscrit
assez bien je crois l&amp;rsquo;organisation de l&amp;rsquo;équipe : chacun chez soi et parlons
nous le moins possible. Je rappelle que cette nouvelle version est développée
depuis un an. Et si le code est de meilleure qualité, il est inutilisable et
loin du périmêtre fonctionnelle attendu. Il y&amp;rsquo;a encore des mois de boulot.&lt;/p&gt;

&lt;p&gt;Au bout &lt;strong&gt;d&amp;rsquo;une semaine&lt;/strong&gt;, le DG et le PDG me viennent me voir pour me poser
une question : «Alors, on les vire ?». «Uh?! Je viens à peine d&amp;rsquo;arriver,
laissez moi le temps !». Je leur demande une semaine pour prendre une décision,
même si au fond de moi je n&amp;rsquo;y crois plus trop. Une semaine plus tard, la
décision est prise de virer tous les développeurs sauf le stagiaire. C&amp;rsquo;était la
première fois que je prenais la décision de virer quelqu&amp;rsquo;un (même si
officiellement je n&amp;rsquo;avais pas la responsabilité). Je savais que ca serait dur pour le «vieux» de retrouver du taff à son âge et sa faible connaissance et
expertise. Je suis descendu au rez de chaussée et j&amp;rsquo;ai pleuré un coup. Ah, tant
qu&amp;rsquo;a être dans les bonnes nouvelles, j&amp;rsquo;annonce par la même occasion que tout le
code du futur produit (trois années / homme l&amp;rsquo;air de rien). est à jeté et qu&amp;rsquo;on
tiendra pas longtemps avec l&amp;rsquo;actuel.&lt;/p&gt;

&lt;p&gt;Je me retrouve donc au bout de deux semaines sans (presque) personne et sans
code, à devoir reconstruire manu militari une toute nouvelle équipe afin de
développer un tout nouveau produit dans un métier que je ne connais pas. Si ce
n&amp;rsquo;est pas du challenge&amp;hellip; Beaucoup de gens vous le diront, redévelopper à
partir de zéro (&lt;em&gt;from scratch&lt;/em&gt;) est le plus gros danger qu&amp;rsquo;une boite peut
faire. Surtout quand c&amp;rsquo;est pour remplacer le produit qui fait 100% du chiffre
d&amp;rsquo;affaire.&lt;/p&gt;

&lt;p&gt;Vous connaissez maintenant mes deux premières semaines. Ah, et l&amp;rsquo;histoire des cinq annonces Python du début me diriez vous ? Et ben, la cinquième annonce, celle sur le développeur junior était&amp;hellip; de ma nouvelle boite. Et plus rigolo encore, j&amp;rsquo;ai passé un entretien dans l&amp;rsquo;une des quatre autres, entretien catastrophique avec un PDG d&amp;rsquo;une extrême froideur. Ce même PDG qui viendra me demander conseil deux ans après car eux aussi avaient le même problème de livraison. Pourquoi moi ? Car lui et mon PDG se connaissaient
puisque ayant fondés la société&amp;hellip; ensemble. Rigolo non ?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installer Python à partir des sources</title>
      <link>http://douche.name/blog/installer-python-sources/</link>
      <pubDate>Tue, 06 Jan 2015 08:30:00 CET</pubDate>
      
      <guid>http://douche.name/blog/installer-python-sources/</guid>
      <description>

&lt;p&gt;J&amp;rsquo;ai toujours utilisé une distribution Linux à base de paquets binaires (Ubuntu, Debian&amp;hellip;), trouvant ce mode de fonctionnement plus reposant que de compiler soi même tout un tas de projets dans divers langages. C&amp;rsquo;est souvent source d&amp;rsquo;erreurs incompréhensibles et de longs moments de solitude. Néanmoins, il existe plusieurs avantages de le faire pour un langage de programmation comme Python :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ne pas toucher à l&amp;rsquo;interpréteur de la distribution et aux packages utilisés par le systême.&lt;/li&gt;
&lt;li&gt;Utiliser un interpréteur &lt;em&gt;vanilla&lt;/em&gt;, sans modification par la distribution.&lt;/li&gt;
&lt;li&gt;Ou inversement appliquer un patch maison.&lt;/li&gt;
&lt;li&gt;Tester son code sur une version en développement.&lt;/li&gt;
&lt;li&gt;Disposer de versions que votre distribution ne gère pas.&lt;/li&gt;
&lt;li&gt;Disposer d&amp;rsquo;une nouvelle version sans attendre la prochaine version de la distribution.&lt;/li&gt;
&lt;li&gt;Avoir des options de compilations différentes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L&amp;rsquo;avantage le plus intéressant pour moi est de ne pas toucher à l&amp;rsquo;interpréteur de la distribution. Ubuntu utilisant massivement Python, je n&amp;rsquo;ai pas envie de trop de le trafiquer (cela dit, une utilisation systématique de &lt;em&gt;virtualenv&lt;/em&gt; donne un résultat identique).&lt;/p&gt;

&lt;p&gt;En 10 ans de compilation maison de l&amp;rsquo;interpréteur Python (je parle de CPython, l&amp;rsquo;interpréteur de référence), je n&amp;rsquo;ai jamais eu de soucis. De plus la procédure est triviale :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Télécharger le tarball sur le site web (par exemple la &lt;a href=&#34;https://www.python.org/ftp/python/3.4.2/Python-3.4.2.tar.xz&#34;&gt;3.4.2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Décompresser&lt;/li&gt;
&lt;li&gt;Lancer &lt;code&gt;configure; make; make install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Et c&amp;rsquo;est tout. La compilation se passe en 4 étapes :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;configure&lt;/em&gt; vérifie que vous avez les dépendances requises le cœur de l&amp;rsquo;interpréteur&lt;/li&gt;
&lt;li&gt;Compilation du cœur&lt;/li&gt;
&lt;li&gt;Compilation des modules&lt;/li&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Le plus difficile est d&amp;rsquo;avoir toutes les dépendances nécessaires pour les modules. Je vous conseille d&amp;rsquo;y faire attention pour éviter des erreurs stupides à l&amp;rsquo;exécution. Il faut vérifier à la fin de la compilation les modules non compilés, par exemple :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Python build finished successfully!
The necessary bits to build these optional modules were not found:
_dbm                  _gdbm                 _tkinter
To find the necessary bits, look in setup.py in detect_modules() for the module&#39;s name.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voici les paquets à installer sur Ubuntu 14.10 avant de compiler Python :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install build-essential libz-dev libreadline-dev libncursesw5-dev libssl-dev \
 libgdbm-dev libsqlite3-dev libbz2-dev liblzma-dev libdb-dev zlib1g-dev libdb-dev libdb5.3-dev \
 libffi-dev libgdbm-dev libmpdec-dev libxft-dev tcl-dev tcl8.6-dev tk-dev tk8.6-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vous pouvez aussi utiliser la commande &lt;code&gt;sudo apt-get build-dep python2.7 python3.4&lt;/code&gt; pour installer automatiquement les dépendances des paquets de la distribution, ou tout simplement vous en inspirer. N&amp;rsquo;oubliez pas cependant d&amp;rsquo;ajouter les sources dans votre configuration apt.&lt;/p&gt;

&lt;p&gt;Et comme je suis fainéant, j&amp;rsquo;utilise un outil pour me simplifier la vie : pyenv.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Présentation de pyenv&lt;/h2&gt;

&lt;p&gt;Pyenv (&lt;a href=&#34;https://github.com/yyuu/pyenv&#34;&gt;lien&lt;/a&gt;) est un outil qui permet :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d&amp;rsquo;installer une version de Python en une seule commande.&lt;/li&gt;
&lt;li&gt;de surcharger votre environnement pour utiliser un Python local.&lt;/li&gt;
&lt;li&gt;de switcher facilement entre vos interpréteurs.&lt;/li&gt;
&lt;li&gt;de lancer une version précise pour un besoin ponctuel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;installation sous Linux est triviale :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/yyuu/pyenv.git ~/.pyenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis modifier son environnement pour ajouter un chemin (configuration qui depend de votre shell, je vous laisse lire la documentation). Vous avez maintenant un pyenv fonctionnel :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv
pyenv 20141211-6-g995da2d
Usage: pyenv &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]

Some useful pyenv commands are:
   commands    List all available pyenv commands
   local       Set or show the local application-specific Python version
   global      Set or show the global Python version
   shell       Set or show the shell-specific Python version
   install     Install a Python version using python-build
   uninstall   Uninstall a specific Python version
   rehash      Rehash pyenv shims (run this after installing executables)
   version     Show the current Python version and its origin
   versions    List all Python versions available to pyenv
   which       Display the full path to an executable
   whence      List all Python versions that contain the given executable

See `pyenv help &amp;lt;command&amp;gt;&#39; for information on a specific command.
For full documentation, see: https://github.com/yyuu/pyenv#readme
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Fonctionnement&lt;/h2&gt;

&lt;p&gt;Le principe de pyenv est d&amp;rsquo;utiliser un &lt;em&gt;shim&lt;/em&gt;, autrement dit d&amp;rsquo;intercepter les commandes que vous tapez pour les rediriger le bon interpréteur en lisant sa configuration. Cela fonctionne de la même façon pour tout logiciel que vous installez avec lui :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which python
/home/sdouche/.pyenv/shims/python
$ which pip
/home/sdouche/.pyenv/shims/pip
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Utilisation&lt;/h2&gt;

&lt;p&gt;Vous avez beaucoup de versions à votre portée :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv install --list
Available versions:
  2.1.3
  2.2.3
  2.3.7
  2.4
  2.4.1
  2.4.2
  2.4.3
  2.4.4
  2.4.5
  2.4.6
  2.5
  2.5.1
  2.5.2
  2.5.3
  2.5.4
  2.5.5
  2.5.6
  2.6.6
  2.6.7
  2.6.8
  2.6.9
  2.7-dev
  2.7
  2.7.1
  2.7.2
  2.7.3
  2.7.4
  2.7.5
  2.7.6
  2.7.7
  2.7.8
  2.7.9
  3.0.1
  3.1-dev
  3.1.3
  3.1.4
  3.1.5
  3.2-dev
  3.2
  3.2.1
  3.2.2
  3.2.3
  3.2.4
  3.2.5
  3.2.6
  3.3.0
  3.3-dev
  3.3.1
  3.3.2
  3.3.3
  3.3.4
  3.3.5
  3.3.6
  3.4.0
  3.4-dev
  3.4.1
  3.4.2
  3.5-dev
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour installer Python 3.4.2 (ajoutez l&amp;rsquo;option &lt;code&gt;-v&lt;/code&gt; pour voir la sortie standard) :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv install 3.4.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis mettre la 3.4.2 en version par défaut :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv global 3.4.2
$ pyenv versions
  system
* 3.4.2 (set by /home/sdouche/.pyenv/version)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L’interpréteur se trouve dans le répertoire &lt;code&gt;~/.pyenv/versions/3.4.2/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Une fois l&amp;rsquo;interpréteur installé, pyenv télécharge et installe automatiquement Setuptools et Pip, ce qui vous évite ces tâches fastidieuses.&lt;/p&gt;

&lt;p&gt;La commande &lt;code&gt;pyenv shell&lt;/code&gt; change simplement la variable d&amp;rsquo;environnement &lt;code&gt;PYENV_VERSION&lt;/code&gt; qui permet de surcharger le choix de l&amp;rsquo;interpréteur dans le shell courant :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv shell 2.7.9
setenv PYENV_VERSION &amp;quot;2.7.9&amp;quot;
$ pyenv versions
  system
* 2.7.9 (set by PYENV_VERSION environment variable)
  3.4.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La commande &lt;code&gt;pyenv local&lt;/code&gt; permet quand à elle de définir un interpréteur par répertoire, en y écrivant un fichier &lt;code&gt;.python-version&lt;/code&gt; (la variable d&amp;rsquo;environnement &lt;code&gt;PYENV_VERSION&lt;/code&gt; étant prioritaire) :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir test
$ cd test
$ pyenv local 2.7.9
$ cat .python-version
2.7.9
$ pyenv versions
  system
* 2.7.9 (set by /home/sdouche/test/.python-version)
  3.4.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;N&amp;rsquo;oubliez pas de taper la commande &lt;code&gt;pyenv rehash&lt;/code&gt; quand vous installez des applications.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Couplage avec Virtualenv&lt;/h2&gt;

&lt;p&gt;Pyenv possède une extension pour virtualenv, permettant d&amp;rsquo;utiliser un environnement virtualisé comme un envionnement classique pyenv.&lt;/p&gt;

&lt;p&gt;Installation de l&amp;rsquo;extension :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vous pouvez maintenant créer un environnement virtualisé :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv virtualenv venv342
$ pyenv versions
  system
* 3.4.2
  venv342
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Cela fait des années que j&amp;rsquo;utilise avec succès ce type d&amp;rsquo;outil (pyenv maintenant, pythonbrew avant), autant en perso qu&amp;rsquo;en pro sans souci particulier. L&amp;rsquo;association pyenv + pyenv-virtualenv permet de toujours avoir un environnement propre, n&amp;rsquo;hésitant pas à multiplier les environnements virtualisés pour chaque besoin particulier. Et je peux aisément tester mon code avec plusieurs versions de Python et changer de version quand j&amp;rsquo;en ai besoin. Bref un outil de &lt;strong&gt;base&lt;/strong&gt; dans ma panoplie.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Passage de GMail à Fastmail</title>
      <link>http://douche.name/blog/passage-de-gmail-a-fastmail/</link>
      <pubDate>Thu, 01 Jan 2015 16:49:00 CET</pubDate>
      
      <guid>http://douche.name/blog/passage-de-gmail-a-fastmail/</guid>
      <description>

&lt;p&gt;En 2004, un pote qui bosse chez Google me file une invitation pour tester un nouveau Webmail appelé GMail. 2014. Cela fait maintenant 10 ans que j&amp;rsquo;utilise GMail pour mes besoins (sur plusieurs comptes) en plus de l&amp;rsquo;utilisation du moteur de recherche Google, Google Maps, Google Calendar, Google+ et Android (et jusqu&amp;rsquo;en 2013 Google Reader). Il était temps de réduire ma dépendance envers Google. Dans un élan de volonté, je me suis décidé à trouver un nouvel hébergeur mail pour 2015. C&amp;rsquo;est maintenant chose faite.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Présentation de Fastmail&lt;/h2&gt;

&lt;p&gt;Fastmail est une boite australienne, qui était un temps une division de la société &lt;em&gt;Opera Software&lt;/em&gt;, créatrice du navigateur web du même nom. Fin 2013, ils ont décidés de passer du modèle gratuit au modèle payant. Les serveurs se trouvent à New York et en Islande.&lt;/p&gt;

&lt;p&gt;Il existe 3 offres :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Individuel (1 compte)&lt;/li&gt;
&lt;li&gt;Famille (&amp;lt;9 comptes)&lt;/li&gt;
&lt;li&gt;Entreprise (jusqu’à 1000 comptes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dans l&amp;rsquo;offre individuel, vous avez 4 possibilités :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lite (10$ / an) : 250Mo mail / 100Mo fichier&lt;/li&gt;
&lt;li&gt;Full (20$ / an) : 1Go  mail / 1Go fichier&lt;/li&gt;
&lt;li&gt;Enhanced (40$ / an) : 15Go mail / 5Go fichier + calendrier + domaine perso&lt;/li&gt;
&lt;li&gt;Premium (120 $/ an) : 60Go mail / 30Go fichier + calendrier + domaine perso&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voulant utiliser des domaines personnels et disposer d&amp;rsquo;une capacité identique à GMail, j&amp;rsquo;ai opté pour &lt;em&gt;Enhanced&lt;/em&gt;. Et 40$ me semble un prix fort raisonnable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Vous pouvez tester Fastmail 60 jours gratuitement (et sans avoir à donner sa CB). Par contre, certaines fonctionnalités sont désactivées comme les alias.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Interface&lt;/h2&gt;

&lt;p&gt;Ce qui me rebutais pendant des années à partir de GMail était l&amp;rsquo;aspect assez repoussant des webmails concurrents. Alors que je me suis fait rapidement à l&amp;rsquo;interface de Fastmail. Claire et sobre, avec cette pointe de design qui fait la différence. Voici un exemple :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/fastmail1.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;De plus, l&amp;rsquo;interface est &lt;strong&gt;rapide&lt;/strong&gt;, bien plus véloce que GMail. C&amp;rsquo;est très agréable ! Un déplacement de mails ou la navigation dans mes dossiers est instantané. Gros point positif ! Il faut noter que je n&amp;rsquo;ai pas encore des dossiers avec plus de 15 000 threads comme avec GMail (je n&amp;rsquo;ai pas transféré les 10Go de la cinquantaine de listes de diffusion dont je suis abonné). Par contre, cela manque de thèmes (seulement 4 mais dans la même gamme de couleur).&lt;/p&gt;

&lt;p&gt;Très bon point, il existe de nombreux raccourcis claviers.&lt;/p&gt;

&lt;p&gt;Par contre je n&amp;rsquo;apprécie pas du tout le fait qu&amp;rsquo;il existe 2 endroits différents pour configurer, appelés &lt;em&gt;settings&lt;/em&gt; et &lt;em&gt;advanced&lt;/em&gt;. Avoir plusieurs endroits pour faire la même chose est source de confusion car on ne sait jamais si c&amp;rsquo;est dans tel ou tel endroit. Et d&amp;rsquo;ailleurs, cela n&amp;rsquo;a pas manqué car il existe 2 écrans pour configurer ses signatures, la configuration de l&amp;rsquo;un semblant écraser l&amp;rsquo;autre. Il y aussi des incohérences dans la navigation. Par exemple :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Quand vous êtes dans l&amp;rsquo;application fichier, le menu principal n&amp;rsquo;est plus une dropbox comme partout ailleurs mais un menu traditionnel (et dans une position différente).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dans un écran de configuration «advanced», vous n&amp;rsquo;avez pas moyen de revenir à l&amp;rsquo;écran général (par exemple pour aller de l&amp;rsquo;écran &lt;em&gt;Folders&lt;/em&gt; à &lt;em&gt;Rules&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Toujours coté ergonomie, je n&amp;rsquo;ai plus de bouton &lt;em&gt;mark as read&lt;/em&gt; directement accessible, il faut que je passe par le menu &lt;em&gt;mark&lt;/em&gt; puis cliquer sur &lt;em&gt;read&lt;/em&gt;. Un clic de plus semble ridicule, sauf quand, comme moi, vous lisez des dizaines de listes de diffusion et que vous mettez les sujets qui ne vous intéressent pas en lus. Ce qui fait donc pas mal de clics en plus. Pour continuer coté ergonomie, les textes cités sont souvent fermés par défaut (comme GMail d&amp;rsquo;ailleurs), ce que je n&amp;rsquo;aime pas du tout.&lt;/p&gt;

&lt;p&gt;Il y a un emplacement en haut à gauche de chaque mail pour un avatar mais il semble prendre uniquement ceux de Wordpress, autant dire que vous n&amp;rsquo;en voyez aucun&amp;hellip;&lt;/p&gt;

&lt;p&gt;Autre lacune, s&amp;rsquo;il existe la notion de &lt;em&gt;flag&lt;/em&gt;, il y&amp;rsquo;en a qu&amp;rsquo;un type. Contrairement à GMail qui possède une douzaine (appelés &lt;em&gt;stars&lt;/em&gt;), ce qui me permet de donner des sens différents selon l&amp;rsquo;action à mener. Par exemple le flag «?» signifie que j&amp;rsquo;attends une réponse alors que le flag «!» veut dire que je dois y répondre. Je perds donc une fonctionnalité très utile.&lt;/p&gt;

&lt;p&gt;Il manque aussi la notion de &lt;em&gt;multiple inbox&lt;/em&gt; (plusieurs vues fusionnées sur le même écran), qui permettait de rajouter une vue avec critère. Par exemple, j&amp;rsquo;avais dans GMail en haut l&amp;rsquo;inbox classique et en bas une inbox qui listait tous les mails «flaggués», ce qui donc me listait toutes les actions á mener. Encore une fonctionnalité perdue.&lt;/p&gt;

&lt;p&gt;Autre fonctionnalité perdue, j&amp;rsquo;ai configuré dans GMail l&amp;rsquo;envoi de mail au bout de 30 secondes, ce qui me laissait le temps de me relire une dernière fois. C&amp;rsquo;est fou le nombre de fautes que je rattrape au dernier moment (j&amp;rsquo;ai une sale manie de ré-écrire en permanence mes phrases, ce qui fait que je relis finalement assez rarement). Bon ok, il suffit de les mettre en draft et d&amp;rsquo;attendre un peu. C&amp;rsquo;est juste un changement de comportement :).&lt;/p&gt;

&lt;p&gt;Fonctionnalité intéressante, vous pouvez envoyer un mail selon un template. Il suffit pour cela de créer un dossier «Templates», d&amp;rsquo;y déplacer un draft pour qui se transforme automatiquement en template. Simple et pratique.&lt;/p&gt;

&lt;p&gt;Au final, je me suis fait rapidement à nouvelle interface mais cela manque d&amp;rsquo;ergonomie. Rien de bloquant mais légèrement déroutant de temps à autre. La seule fonctionnalité qui me manque vraiment est d&amp;rsquo;avoir plus de flags.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Gestion des dossiers&lt;/h2&gt;

&lt;p&gt;Voila pour moi un point fort de Fastmail, il est possible d&amp;rsquo;avoir plusieurs niveaux de dossiers facilement. Je m&amp;rsquo;explique. J&amp;rsquo;aime bien catégoriser les mails, que ce soit des listes de diffusion (Go →go-nuts) ou pro (projet X→devis). C&amp;rsquo;est possible dans GMail mais le décalage visuel m&amp;rsquo;oblige à faire des noms de dossier court et ne pas avoir plus de 2 profondeurs (car l&amp;rsquo;interface ne permet pas d&amp;rsquo;agrandir la fenêtre des dossiers). UX quand tu nous tiens. Comme le décalage est léger dans Fastmail, je peux en avoir 3 ou 4 sans trop de soucis (et la fenêtre est ici déplaçable). Ce qui  fait que maintenant j&amp;rsquo;ai des dossiers racines comme «ml» et «pro». La visualisation et la navigation étant bien améliorées à mes yeux. De plus, et contrairement à GMail, on peut ordonner les dossiers dans l&amp;rsquo;ordre de son choix.&lt;/p&gt;

&lt;p&gt;Rien de révolutionnaire mais un plus bien pratique, quand comme moi, vous atteignez la centaine de dossiers (car rappelez vous que l&amp;rsquo;un de mes objectifs est de fusionner trois comptes GMail). Voici un exemple avec une arborescence de 3 sous-dossiers (ml→Go→golang-nuts) :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/fastmail2.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Par contre, l&amp;rsquo;ordre des dossiers se fait par glisser - déplacer et c&amp;rsquo;est un véritable enfer. On sent l&amp;rsquo;outil développé pour quelques dossiers mais pas &lt;strong&gt;du tout&lt;/strong&gt; pensé pour le cas où il faut glisser en dehors de l&amp;rsquo;écran. Et la encore, on a un écran de configuration dans &lt;em&gt;settings&lt;/em&gt; qui gère l&amp;rsquo;ordre mais marche mal avec beaucoup de dossiers et un écran dans &lt;em&gt;advanced&lt;/em&gt; qui gère bien le fait d&amp;rsquo;avoir plein de dossiers mais qui ne gère pas l&amp;rsquo;ordre&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Dossier vs label&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;utilisation de Fastmail me renvoie 10 ans en arrière, car il n&amp;rsquo;implémente pas la notion de &lt;em&gt;label&lt;/em&gt;. Ici, on a affaire à de bêtes dossiers, ce qui veut dire que contrairement à GMail, il n&amp;rsquo;est pas possible de «tagguer» plusieurs fois un mail, soit pour le rendre visible dans plusieurs dossiers, soit pour lui donner plus de sens. Cela pose soucis si par exemple on utilise une sorte de «méthode GTD», en labellisant les mails («en attente», «en cours», «action», etc). J&amp;rsquo;ai trouvé que la notion de label est, avec la vue par défaut en mode conversation, les deux plus grosses avancées de GMail quand j&amp;rsquo;ai commencé à l&amp;rsquo;utiliser en 2004. Je pense néanmoins que je pourrais m&amp;rsquo;en passer sans trop de larmes.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Filtre&lt;/h2&gt;

&lt;p&gt;Le classement de ses mails se fait à travers des classiques filtres. Ces filtres permettent de supprimer, transmettre ou déplacer des mails. Les critères sont :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always — the rule always applies to every message.&lt;/li&gt;
&lt;li&gt;The sender&amp;rsquo;s — looks at the From address of the message.&lt;/li&gt;
&lt;li&gt;A recipient&amp;rsquo;s — looks at the names and addresses in the To and Cc fields.&lt;/li&gt;
&lt;li&gt;The subject — looks at the Subject of the message.&lt;/li&gt;
&lt;li&gt;The message text — looks at the body of the message.&lt;/li&gt;
&lt;li&gt;The mailing list ID — looks at the List-Id header of the message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;De plus, on peut utiliser un &lt;em&gt;glob&lt;/em&gt; ou une &lt;em&gt;regexp&lt;/em&gt; pour des besoins plus évoluer. Et surtout, on peut utiliser le langage &lt;a href=&#34;http://www.wikiwand.com/en/Sieve_(mail_filtering_language)&#34;&gt;Sieve&lt;/a&gt; qui permet de décrire ses filtres sous forme de DSL. Le premier avantage étant de pouvoir facilement importer, modifier et exporter l&amp;rsquo;ensemble de ses filtres. Voici un exemple :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if header :contains [&amp;quot;list-id&amp;quot;, &amp;quot;list-post&amp;quot;] &amp;quot;&amp;lt;rust-dev.mozilla.org&amp;gt;&amp;quot; {
  fileinto &amp;quot;INBOX.ml.Rust.rust-dev&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Par contre, j&amp;rsquo;ai un gros soucis : je me retrouve avec plusieurs fois le même mail dans un dossier car c&amp;rsquo;est un fait un mail à plusieurs destinations (mail se trouvant sur plusieurs listes de diffusion). Si par exemple j&amp;rsquo;envoie un mail à &lt;em&gt;go-nuts&lt;/em&gt; et &lt;em&gt;go-dev&lt;/em&gt;, il va se retrouver en double dans le dossier «ml/go/go-nuts» car le filtre idoine se trouve avant le filtre qui classe dans «ml/go/go-dev». Gênant. En regardant les règles Sieve, je m&amp;rsquo;aperçois que c&amp;rsquo;est un gros bloc &lt;em&gt;if/else&lt;/em&gt;. Ça se trouve, en ne mettant que des &lt;em&gt;if&lt;/em&gt;, cela résout le problème. A tester.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Moteur de recherche&lt;/h2&gt;

&lt;p&gt;Gros point fort de GMail, à tel point que certains utilisateurs ne rangent jamais leurs mails et passe systématiquement par le moteur de recherche. De ce que je peux en juger, le moteur de recherche de Fastmail semble aussi de très bonne facture, trouvant immédiatement les mails que je recherche. Et comme GMail, on peut utiliser un DSL :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in:&lt;foldername&gt;&lt;/li&gt;
&lt;li&gt;from:&lt;phrase&gt;&lt;/li&gt;
&lt;li&gt;to:&lt;phrase&gt; (searches both To and Cc)&lt;/li&gt;
&lt;li&gt;subject:&lt;phrase&gt;&lt;/li&gt;
&lt;li&gt;body:&lt;phrase&gt;&lt;/li&gt;
&lt;li&gt;list:&lt;phrase&gt; (searches the List-Id header)&lt;/li&gt;
&lt;li&gt;header:&amp;rdquo;&lt;headername&gt;: &lt;phrase&gt;&amp;ldquo;&lt;/li&gt;
&lt;li&gt;substr:(&lt;other search terms&gt;)&lt;/li&gt;
&lt;li&gt;since|after|newer:&lt;date&gt;&lt;/li&gt;
&lt;li&gt;before|older:&lt;date&gt;&lt;/li&gt;
&lt;li&gt;date:&lt;date&gt;&lt;/li&gt;
&lt;li&gt;smaller|maxsize:&lt;size&gt;&lt;/li&gt;
&lt;li&gt;bigger|larger|minsize:&lt;size&gt;&lt;/li&gt;
&lt;li&gt;has|is:&lt;boolean&gt;&lt;/li&gt;
&lt;li&gt;filetype:image|document|spreadsheet|presentation|pdf&lt;/li&gt;
&lt;li&gt;flag:&lt;flag name&gt;&lt;/li&gt;
&lt;li&gt;msgid:&lt;id&gt;&lt;/li&gt;
&lt;li&gt;imap:&lt;raw imap search&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les booléens peuvent être :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;read or seen&lt;/li&gt;
&lt;li&gt;unread or unseen&lt;/li&gt;
&lt;li&gt;pinned or flagged&lt;/li&gt;
&lt;li&gt;unpinned or unflagged&lt;/li&gt;
&lt;li&gt;replied or answered&lt;/li&gt;
&lt;li&gt;unreplied or unanswered&lt;/li&gt;
&lt;li&gt;attachment or hasatt&lt;/li&gt;
&lt;li&gt;noattachment or hasnoatt or noatt&lt;/li&gt;
&lt;li&gt;draft&lt;/li&gt;
&lt;li&gt;undraft&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On peu appliquer des opérateurs :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AND&lt;/li&gt;
&lt;li&gt;OR&lt;/li&gt;
&lt;li&gt;NOT&lt;/li&gt;
&lt;li&gt;() - grouping&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Comme vous le constater, c&amp;rsquo;est fort complet. De plus vous pouvez sauvegarder une recherche qui se modélisera sous forme de dossier : cliquer dessus et vous verrez le résultat de la recherche. Top !&lt;/p&gt;

&lt;p&gt;Encore un défaut d&amp;rsquo;ergonomie, je trouve la fenêtre de recherche bien trop petite.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Utilisation de domaines DNS&lt;/h2&gt;

&lt;p&gt;Je voulais profiter de la migration pour utiliser des domaines personnels (ce qui est possible avec &lt;em&gt;Google Apps&lt;/em&gt;, j&amp;rsquo;avais d&amp;rsquo;ailleurs mon mail pro la dessus).
Pour cela 2 solutions :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;transférer le domaine chez eux. Vous contrôlez ensuite vos entrées DNS directement dans l&amp;rsquo;interface Fastmail. Vous avez par défaut tout un tas d&amp;rsquo;entrées pré-configurées (MX, JABBER, CALDAV, etc).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;spécifier les MX Fastmail. Il faudra alors ajouter manuellement certaines entrées comme le &lt;em&gt;DKIM&lt;/em&gt;. Rien de compliqué.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;J&amp;rsquo;ai opté pour la première solution.&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;utilise donc maintenant un domaine personnel pour chaque adresse mail que j&amp;rsquo;utilise (avec un seul compte Fastmail), les «identités» faisant le reste. Du classique.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Alias&lt;/h2&gt;

&lt;p&gt;En plus des domaines virtuels, il est possible de créer des alias à partir de l&amp;rsquo;énorme liste de domaines que possède Fastmail, comme fastmail.mx, fastmail.net, eml.cc ou encore mm.st. Au total une bonne centaine je pense ! J&amp;rsquo;ai donc créer un alias pour un usage «poubelle», histoire de pas donner mon véritable mail quand je teste des services (mais qui à l&amp;rsquo;avantage de ne pas s&amp;rsquo;appeler &lt;em&gt;sdouche@junk.org&lt;/em&gt;, il fait «vrai»). Il suffit d&amp;rsquo;en changer de temps en temps si le spam augmente. Et comme c&amp;rsquo;est un alias, cela tombe au même endroit.&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Adresse avec +&lt;/h2&gt;

&lt;p&gt;Comme avec GMail, il est possible d&amp;rsquo;utiliser le symbole + dans votre adresse mail, ce qui permet de distinguer les émetteurs. Par exemple, mettre &lt;em&gt;nom+service@domaine.com&lt;/em&gt; permet de savoir qui a revendu votre mail à des spammeurs :). Si vous avez un dossier qui correspond a ce qui suit le symbole + (service dans l&amp;rsquo;exemple précédent), il sera automatiquement rangé dedans. Mieux, vous pouvez utiliser l&amp;rsquo;adresse &lt;em&gt;nom@service.domaine.com&lt;/em&gt;, ce qui sera automatiquement transformer en &lt;em&gt;nom+service@montld.com&lt;/em&gt;. Utile pour ne montrer que vous fournissez une adresse personnalisée.&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;SPAM&lt;/h2&gt;

&lt;p&gt;Voila un gros plus de GMail ! je recevais moins d&amp;rsquo;une dizaine de spams par semaine, dont un non taggué. Ce qui est pas mal pour un mail abondamment utilisé pendant 10 ans sans faire attention. C&amp;rsquo;est encore trop tôt pour donner une indication pour Fastmail, il faudra quelques mois pour cela. Par contre j&amp;rsquo;ai remarqué qu&amp;rsquo;en plus d&amp;rsquo;une base de connaissance globale, vous avez aussi une base personnelle que vous pouvez entrainer avec les boutons &lt;em&gt;Report spam&lt;/em&gt; et &lt;em&gt;Report non-spam&lt;/em&gt;. De plus vous avez plusieurs profils de protection :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basic : Known insecure email hosts/relays are always blocked (xbl)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Normal : Known insecure email hosts/relays are always blocked (xbl). Likely spam is placed in your &amp;lsquo;Junk Mail&amp;rsquo; folder. Email from people in your address book is definite not spam. No email is discarded by the spam filter.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Aggressive : Known insecure email hosts/relays are always blocked (xbl). Possible spam is placed in your &amp;lsquo;Junk Mail&amp;rsquo; folder. Extremely probable spam is discarded without you seeing it. Email from people in your address book is definite not spam.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;White list only : Known insecure email hosts/relays are always blocked (xbl). Only email that comes from someone listed in your address book is let through. All other email is discarded.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Custom : Known insecure email hosts/relays are always blocked (xbl). Completely customise all other spam settings&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L&amp;rsquo;option liste blanche est intéressante pour ceux qui n&amp;rsquo;utilise le mail qu&amp;rsquo;avec des personnes identifiées. J&amp;rsquo;ai choisi &lt;em&gt;Normal&lt;/em&gt; pour l&amp;rsquo;instant.&lt;/p&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;Phishing&lt;/h2&gt;

&lt;p&gt;Autre point fort de GMail, je n&amp;rsquo;ai rien vu de ce coté là. Néanmoins, étant un utilisateur averti (et qui n&amp;rsquo;hésite pas à lire les entêtes mail), ce n&amp;rsquo;est pas trop un souci. Mais cela reste un point faible par rapport à GMail.&lt;/p&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;Calendrier&lt;/h2&gt;

&lt;p&gt;Le calendrier est vraiment pas mal, sobre et agréable à l’œil, tant pour la vision générale (sur plusieurs semaines) qu&amp;rsquo;en détail (la semaine en cours). On peut en créer plusieurs et assigner des couleurs différentes, et importer des calendriers publics (format ICS). Mais s&amp;rsquo;il est possible d&amp;rsquo;assigner 3 rappels du type mail ou alerte web, il n&amp;rsquo;y pas de SMS ! Ce qui est bien pratique quand on ne reçoit pas de données (3G/4G), comme par exemple dans certains locaux. Utile certes mais pas indispensable.&lt;/p&gt;

&lt;p&gt;Et bien sur, pas de lien avec Google Maps, qui permettait en autre de valider l&amp;rsquo;adresse insérée.&lt;/p&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;Espace de stockage&lt;/h2&gt;

&lt;p&gt;Votre espace de stockage est accessible par DAV ou FTP. Vous pouvez même le personnaliser avec des sous-domaines ou disposer de galeries photo, ajouter un mot de passe ou faire du &lt;em&gt;throttling&lt;/em&gt; (limiter la bande passante). Pas la fonctionnalité du siècle mais toujours utile pour mettre à disposition des fichiers sans activer un service supplémentaire comme Dropbox.&lt;/p&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;Chat&lt;/h2&gt;

&lt;p&gt;Vous avez en plus un compte Jabber pour le chat. Je n&amp;rsquo;ai pas encore testé car je n&amp;rsquo;arrive pas à le faire fonctionner (les paramètres sont bons mais le client mouline dans le vide).&lt;/p&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;Login alternatifs&lt;/h2&gt;

&lt;p&gt;J&amp;rsquo;ai trouvé cette fonctionnalité intéressante. Vous pouvez créer un autre login, comme par exemple OTP (usage unique) ou utilisable 24h avec envoi du mot de passe par SMS. Cela peut être pratique quand on se trouve dans un endroit pas très sur. Par exemple, j&amp;rsquo;utilise des mots de passe OTP pour les connexions FTP.&lt;/p&gt;

&lt;h2 id=&#34;toc_15&#34;&gt;Alias de diffusion&lt;/h2&gt;

&lt;p&gt;On peut créer un alias qui enverra un mail à chaque membre d&amp;rsquo;un groupe. Cela ressemble à une liste de diffusion mais sans logiciel spécifique (pour s&amp;rsquo;abonner, se désabonner ou choisir des modes de réception). Cela se résume à un alias vers N personnes. Cela peut être utile.&lt;/p&gt;

&lt;h2 id=&#34;toc_16&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;En plus du mail, du stockage de fichiers et du chat, vous avez aussi une petite application de prise de notes (très basique). Comme j&amp;rsquo;utilise d&amp;rsquo;autres applications pour ce besoin, je n&amp;rsquo;en dirais pas plus.&lt;/p&gt;

&lt;h2 id=&#34;toc_17&#34;&gt;Application Android&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;application Android est pas mal, bien que moins réactive que celle de GMail (je pense que cette dernière met en cache les mails inbox et pas Fastmail). Un petit bémol sur l&amp;rsquo;ergonomie pour distinguer les mails non-lus des mails lus : dans les 2 cas le titre est en gras, ce qui me gène pour les distinguer (c&amp;rsquo;est un flag bleu qui joue le marqueur). Une question d&amp;rsquo;habitude je pense. Par contre, il n&amp;rsquo;existe pas de widget Calendar ! Il faut donc ouvrir l&amp;rsquo;application et faire 4 clics avant de l&amp;rsquo;avoir, ce qui est clairement inintéressant. Heureusement il existe l&amp;rsquo;application &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.dmfs.caldav.lib&#34;&gt;CalDAV-Sync&lt;/a&gt; qui permet de récupérer et intégrer vos évènements dans Android. Merci le service CalDAV ! Pour information il existe une application similaire pour les contacts (qui va taper lui sur le service CardDAV).&lt;/p&gt;

&lt;h2 id=&#34;toc_18&#34;&gt;Migration&lt;/h2&gt;

&lt;p&gt;Un mot sur la migration, qui est incroyablement simple : vous spécifiez le serveur (&lt;em&gt;imap.gmail.com&lt;/em&gt; pour GMail), le login, le mot de passe est les dossiers à migrer et vous attendez. Cela a pris quelques heures pour moi. Simple et efficace.&lt;/p&gt;

&lt;h2 id=&#34;toc_19&#34;&gt;Et GMail ?&lt;/h2&gt;

&lt;p&gt;Je garde pour l&amp;rsquo;instant mon ancien compte GMail, car c&amp;rsquo;est toujours utile d&amp;rsquo;en avoir un (par exemple pour gérer les Google Groups). Surtout qu&amp;rsquo;il est utilisé depuis 10 ans, il est donc dans les contacts de pas mal de connaissances. J&amp;rsquo;ai donc ajouté un &lt;em&gt;forward&lt;/em&gt; automatique pour éviter de me connecter.&lt;/p&gt;

&lt;h2 id=&#34;toc_20&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Malgré les quelques défauts que j&amp;rsquo;ai pu voir, &lt;strong&gt;je suis satisfait&lt;/strong&gt; de mon passage chez Fastmail. Malgré quelques légers bugs, une ergonomie perfectible et surtout quelques écrans de configuration à revoir, le service est de qualité et surtout rapide ! Certaines fonctionnalités montrent qu&amp;rsquo;ils ciblent aussi des utilisateurs avancées, ce qui me va fort bien. Et je reste confiant sur des futures améliorations, le passage récent au modèle payant permettant d&amp;rsquo;avoir bien plus de moyens.&lt;/p&gt;

&lt;p&gt;Je suis content d&amp;rsquo;utiliser un service qui mise sur des &lt;strong&gt;formats ouverts&lt;/strong&gt; : POP, IMAP, XMPP, CardDAV, CalDAV, FTP, WebDAV, LDAP. De plus, ils utilisent intensivement les &lt;strong&gt;Logiciels Libres&lt;/strong&gt; et développent activement le serveur mail Libre Cyrus IMAP. Ils ont aussi libérer du code, notamment leur framework Javascript.&lt;/p&gt;

&lt;p&gt;Content aussi de sortir un peu des griffes de Google puisque j&amp;rsquo;utilise deux services en moins (Google Mail et Google Calendar). De plus, j&amp;rsquo;appréciais de moins en moins les évolutions dans GMail : interface plus lourde, ergonomie en baisse, nouvelles fonctionnalités plutôt orientées noob (&lt;em&gt;important mail&lt;/em&gt; comme le futur &lt;em&gt;Inbox&lt;/em&gt; qui semblent se focaliser plutôt sur les gens qui ont du mal avec le mail, alors que je fais de l&amp;rsquo;inbox zéro depuis 10 ans).&lt;/p&gt;

&lt;p&gt;Dommage que les serveurs principaux se trouvent aux USA (même si la loi ne s&amp;rsquo;applique pas de même façon car c&amp;rsquo;est une boite non américaine). Espérons qu&amp;rsquo;un hébergeur européen de cette qualité voit le jour pour héberger mes mails en Europe, ou que Fastmail donne la possibilité de choisir ses serveurs.&lt;/p&gt;

&lt;p&gt;Et si vous connaissez quelqu&amp;rsquo;un chez eux, n&amp;rsquo;hésitez pas à transmettre mes remarques :).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Worse is better</title>
      <link>http://douche.name/blog/worse-is-better/</link>
      <pubDate>Thu, 18 Dec 2014 15:19:00 CET</pubDate>
      
      <guid>http://douche.name/blog/worse-is-better/</guid>
      <description>

&lt;p&gt;J&amp;rsquo;ai lu voici quelques mois un billet qui s&amp;rsquo;intitule &lt;a href=&#34;http://dreamsongs.com/RiseOfWorseIsBetter.html&#34;&gt;The Rise of Worse is Better&lt;/a&gt; par Richard P. Gabriel, développeur Lisp (qui a d&amp;rsquo;ailleurs monté une société autour de ce langage dans les années 80). Vieux billet puisqu&amp;rsquo;il date de 1989 dans sa version original. Il est, à l&amp;rsquo;origine, une section dans un essai nommé &lt;a href=&#34;http://dreamsongs.com/WIB.html&#34;&gt;Lisp: Good News, Bad News, How to Win Big&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dans ce billet, Gabriel expose deux visions du développement logiciel qu&amp;rsquo;il appelle la conception «The Right Thing» (approche MIT) et la conception «Worse is Better» (approche Stanford). Stanford et MIT se trouvant à San Francisco et l&amp;rsquo;autre à Boston, cela donne un arrière gout de &lt;em&gt;East Coast&lt;/em&gt; vs &lt;em&gt;West Coast&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Il définit chaque conception en quatre points : simplicité (simplicity), exactitude (correctness), cohérence (consistency) et complétude (completeness).&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Worse is Better&lt;/h2&gt;

&lt;p&gt;Voici les quatre points :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;La conception doit être simple. tant dans son implémentation que dans son interface. Mais la simplicité d&amp;rsquo;&lt;strong&gt;implémentation&lt;/strong&gt; est la plus importante.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La conception doit être juste dans tous ses aspects observables, mais il est &lt;strong&gt;préférable d&amp;rsquo;être simple que juste&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La conception doit être cohérente, mais on peut &lt;strong&gt;sacrifier dans certains cas la cohérence pour la simplicité&lt;/strong&gt;. De plus, il est préférable de supprimer des bouts de conception qui introduise de la complexité ou de l&amp;rsquo;incohérence.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La conception doit couvrir autant de situations que possible, mais on peut &lt;strong&gt;sacrifier la complétude en faveur des autres caractéristiques&lt;/strong&gt; comme l’exactitude ou la cohérence, surtout si cela joue sur la complexité.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En schématisant, nous avons :&lt;/p&gt;

&lt;p&gt;simplicité (implémentation) ❭ simplicité (interface) ❭ exactitude ❭ cohérence ❭ complétude&lt;/p&gt;

&lt;p&gt;Nous pouvons voir que l&amp;rsquo;approche de Stanford se focalise avant tout sur la simplicité d&amp;rsquo;implémentation. La simplicité étant considérée comme l&amp;rsquo;objectif plus important, il peut sacrifier de l&amp;rsquo;exactitude. De même, il peut sacrifier de la cohérence si cela augmente la complexité. Et de la complétude si cela améliore les points précédents.&lt;/p&gt;

&lt;p&gt;Gabriel décrit Unix et le langage C comme représentatif de cette approche.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The Right Thing&lt;/h2&gt;

&lt;p&gt;Voici les quatre points :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;La conception doit être simple. tant dans son implémentation que dans son interface. Mais la simplicité d&amp;rsquo;&lt;strong&gt;interface&lt;/strong&gt; est la plus importante.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La conception doit être juste dans tous ses aspects observables. &lt;strong&gt;L&amp;rsquo;inexactitude n&amp;rsquo;est pas permise&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La conception doit être cohérente. On peut &lt;strong&gt;sacrifier la simplicité et la complétude pour avoir de la cohérence&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La conception doit couvrir le plus de situations utiles. Il est &lt;strong&gt;préférable d&amp;rsquo;être complet que simple&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En schématisant, nous avons :&lt;/p&gt;

&lt;p&gt;exactitude ❭ cohérence ❭ complétude ❭ simplicité (interface) ❭ simplicité (implémentation)&lt;/p&gt;

&lt;p&gt;Au contraire de la première approche, l&amp;rsquo;approche MIT se focalise sur l&amp;rsquo;exactitude. La cohérence et la complétude sont plus importantes que la simplicité. Elle force le concepteur à un plus gros travail (pour avoir un code complet, exact et cohérent).&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Son interprétation&lt;/h2&gt;

&lt;p&gt;Gabriel explique que l&amp;rsquo;approche qui prône la simplicité produit de meilleur résultat sur le long terme, en prenant par exemple Unix, qui pouvait être porté bien plus facilement sur de nouvelles plateformes, ce qui a permis à ce dernier de se développer plus rapidement. Pour mieux exposer les différences, il raconte une petite histoire entre deux personnes (Bill Joy et Dan Weinreb si je ne dis pas de bêtise) :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Two famous people, one from MIT and another from Berkeley (but working on Unix) once met to discuss operating system issues. The person from MIT was knowledgeable about ITS (the MIT AI Lab operating system) and had been reading the Unix sources. He was interested in how Unix solved the PC loser-ing problem. The PC loser-ing problem occurs when a user program invokes a system routine to perform a lengthy operation that might have significant state, such as IO buffers. If an interrupt occurs during the operation, the state of the user program must be saved. Because the invocation of the system routine is usually a single instruction, the PC of the user program does not adequately capture the state of the process. The system routine must either back out or press forward. The right thing is to back out and restore the user program PC to the instruction that invoked the system routine so that resumption of the user program after the interrupt, for example, re-enters the system routine. It is called PC loser-ing because the PC is being coerced into loser mode, where loser is the affectionate name for user at MIT.&lt;/p&gt;

&lt;p&gt;The MIT guy did not see any code that handled this case and asked the New Jersey guy how the problem was handled. The New Jersey guy said that the Unix folks were aware of the problem, but the solution was for the system routine to always finish, but sometimes an error code would be returned that signaled that the system routine had failed to complete its action. A correct user program, then, had to check the error code to determine whether to simply try the system routine again. The MIT guy did not like this solution because it was not the right thing.&lt;/p&gt;

&lt;p&gt;The New Jersey guy said that the Unix solution was right because the design philosophy of Unix was simplicity and that the right thing was too complex. Besides, programmers could easily insert this extra test and loop. The MIT guy pointed out that the implementation was simple but the interface to the functionality was complex. The New Jersey guy said that the right tradeoff has been selected in Unix-namely, implementation simplicity was more important than interface simplicity.&lt;/p&gt;

&lt;p&gt;The MIT guy then muttered that sometimes it takes a tough man to make a tender chicken, but the New Jersey guy didn&amp;rsquo;t understand (I&amp;rsquo;m not sure I do either).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Il caricature l&amp;rsquo;approche Stanford en l&amp;rsquo;a nommant «Worse is Better» et non «Less is More» pour bien montrer que c&amp;rsquo;est contre intuitif à ses yeux : On fait simple même si le résultat final n&amp;rsquo;est pas aussi complet et cohérent que l&amp;rsquo;on pourrait espérer. Il dit d&amp;rsquo;ailleurs « The good news is that in 1995 we will have a good operating system and programming language; the bad news is that they will be Unix and C++.»&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Mon interprétation&lt;/h2&gt;

&lt;p&gt;Il faut savoir que ce texte a pas mal fait parlé de lui (et encore maintenant, la preuve avec ce billet). Gabriel à lui-même fait une critique (il dit ne sais pas savoir quoi en penser. Il est des fois pour, des fois contre). Si vous cherchez &lt;a href=&#34;https://www.google.fr/#q=worse+is+better&#34;&gt;Worse is better&lt;/a&gt; dans votre moteur de recherche, vous tomberez sur plusieurs textes assassins, qui critiquent fortement cette philosophie pour avoir favorisée la médiocrité en développement logiciel. D&amp;rsquo;autres critiques mettent en avant les contraintes économiques comme explication pour certaines évolutions comme Unix ou les processeurs x86. De plus, je pense qu&amp;rsquo;il faut prendre ce texte sans y ajouter la notion de qualité. Car la plupart des critiques que j&amp;rsquo;ai pu lire partait du principe que faire simple signifiait «gros hack», ce qui n&amp;rsquo;est pas valable. La qualité est orthogonale à la discussion (on peut mal coder dans les deux philosophies).&lt;/p&gt;

&lt;p&gt;Pour ma part, je trouve ce texte intéressant car il formalise une vision du développement que j&amp;rsquo;ai depuis longtemps, à savoir que la simplicité est la mère de toutes les vertus. Cela étant dit, faire simple ne veut pas dire simpliste, ou ne pas avoir de complexité à la fin. Mais de toujours chercher à obtenir un résultat le plus «dépouillé». Car cela sera plus simple à manipuler et à modifier par la suite.&lt;/p&gt;

&lt;p&gt;Gabriel parle de C et d&amp;rsquo;Unix, je voudrais rajouter quelques exemples :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Internet (la pile TCP/IP) a grandi en même temps qu&amp;rsquo;un concurrent européen : X25 (développé à partir de 1976). Ce dernier était plus robuste et fiable puisque chaque hop s&amp;rsquo;assurait de la validité des paquets. A contrario, TCP/IP ne fait aucune vérification pendant le transport, l&amp;rsquo;intelligence se trouvant dans les extrémités du réseau (et non le cœur comme X25), rendant les hop bien plus facile à développer et moins couteux. Alors que TCP/IP fait tourner Internet, X25 était désuet en 1995&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La micro-informatique est bien plus simple (voir pauvre pour certains) que les mainframes vendus depuis les années 60. Mais bien plus facile à comprendre et à manipuler, bien moins chers, ils se sont imposés un peu partout.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Les réseaux locaux utilisent Ethernet, protocole assez basique inventé par Bob Metcalfe (au fameux centre Xerox Palto Alto. Il fonda plus tard 3Com). Il existait d&amp;rsquo;autres protocoles plus fiables comme Token Ring d&amp;rsquo;IBM. Mais bien plus couteux, le protocole Ethernet pris rapidement le pas. Et par sa conception simple, on est passé du 10BaseT au 10000BaseT.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Git est un outil d&amp;rsquo;une conception incroyablement simple (Linus Torvalds a utilisé Git pour ses besoins au bout de 5 jours). Basé sur une implémentation réussie du DAG et de la notion de référence, Git libère le programmeur du carcan SVN (bien plus complexe dans sa conception).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linux s&amp;rsquo;est développé en noyau monolithique (conception simple), alors que certains lui prédisait une mort avec l&amp;rsquo;arrivée des micro-noyaux, bien mieux sur bien des aspects. 20 ans après, on sait ce qui est advenu.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Plus généralement, la philosophie du Libre se rapproche du &lt;em&gt;Worse is better&lt;/em&gt;. Faire simple. D&amp;rsquo;ailleurs Gabriel décrit dans un autre texte la proximité de son texte avec certaines idées de Richard Stallman.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bien sûr, les choses ne sont jamais blanc ou noir, et des décisions économiques, bureaucratiques ou d&amp;rsquo;objectifs complexes, voir le hasard sont en partie à l&amp;rsquo;origine de certains résultats. Mais je pense sincèrement que d&amp;rsquo;avoir la simplicité d&amp;rsquo;implémentation comme vecteur principal de son développement est intéressant. Les exemples ci dessus ne sont pas anodins, car provenant tous du même milieu (Internet et Unix sont étroitement liés, Stallman et Torvalds ont inventés un Unix-like), milieu qui a imposé pas mal de ses technologies.&lt;/p&gt;

&lt;p&gt;Et pour la petite histoire, Internet est aussi issu de la cote ouest, et ce n&amp;rsquo;est pas anodin (mais cela nous mènerait bien trop loin, mais je vous engage à lire l&amp;rsquo;histoire d&amp;rsquo;Internet qui est fort instructif).&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Et alors ?&lt;/h2&gt;

&lt;p&gt;N&amp;rsquo;est il pas dérisoire de tenter de définir précisément un cadre au développement logiciel, domaine tellement jeune (40 ans d’existence pour la micro-informatique, 65 ans pour l&amp;rsquo;informatique) et surtout immature ? Est ce que les partisans de la conception &lt;em&gt;The Right Thing&lt;/em&gt; n&amp;rsquo;ont ils pas raison après tout, en stigmatisant la médiocrité des logiciels actuels ? N&amp;rsquo;est ce pas &lt;strong&gt;ma&lt;/strong&gt; médiocrité intellectuelle qui me pousse dans les bras du &lt;em&gt;Worse is Better&lt;/em&gt; car je suis incapable de faire mieux ? Mais alors, pourquoi les défenseurs des langages comme Scala, D, Ocaml ou Haskell, qui se font «entendre» avec force sur la toile (généralement avec des commentaires assassins), ne livrent pas eux même de meilleurs logiciels : Où est le prochain système d&amp;rsquo;exploitation en OCaml ? Le futur Git en Haskell ? Pourquoi Google, qui a surement embauché un grande partie d&amp;rsquo;excellents développeurs dans la décennie passée préfère Java, Python et le C++ ? Et que le nouveau langage qui perce avec force est Go, symbole du &lt;em&gt;Worse is Better&lt;/em&gt; ?&lt;/p&gt;

&lt;p&gt;De plus, les études que j&amp;rsquo;ai pu lire ne sont pas plus concluants (d&amp;rsquo;ailleurs si vous en avez d&amp;rsquo;autres je suis preneur car je n&amp;rsquo;ai pas tout retrouvé) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://macbeth.cs.ucdavis.edu/lang_study.pdf&#34;&gt;A Large Scale Study of Programming Languages and Code Quality in Github&lt;/a&gt; (2014)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;«Most notably, it does appear that strong typing is modestly better than weak typing, and among functional languages, static typing is also somewhat better than dynamic typing. We also find that functional languages are somewhat better than procedural languages. It is worth noting that
these modest effects arising from language design are overwhelmingly dominated by the process factors such as project size, team size, and commit size. However, we hasten to caution the reader
that even these modest effects might quite possibly be due to other, intangible process factors, e.g., the preference of certain personality types for functional, static and strongly typed languages.»&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://digitalcommons.usu.edu/cgi/viewcontent.cgi?article=1077&amp;amp;context=honors&#34;&gt;An Empirical Study of Student Programming Bugs&lt;/a&gt; (2011)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;«By far, the most common frustration involved problem solving, i.e., students had difficulty understanding the problem statement on their assignment and designing a solution.»&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-yuan.pdf&#34;&gt;An Analysis of Production Failures in Distributed Data-Intensive Systems&lt;/a&gt; (201)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;«We found the majority of catastrophic failures (ndlr: 92%) could easily have been prevented by performing simple testing on error handling code – the last line of defense – even without an understanding of the software design. We extracted three simple rules from the bugs that have lead to some of the catastrophic failures, and developed a static checker, Aspirato, capable of locating these bugs. Over 30% of the catastrophic failures would have been prevented had Aspirator been used and the identified bugs fixed. Running Aspirator on the code of 9 distributed systems located 143 bugs and bad practices that have been fixed or confirmed by the developers.»&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dl.acm.org/authorize?6743202&#34;&gt;An Empirical Study of the Influence of Static Type Systems on the Usability of Undocumented Software&lt;/a&gt; (2012)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;«We report on a controlled experiment where 27 subjects performed programming tasks on an undocumented API with a static type system (requiring type annotations) as well as a dynamic type system (which does not). Our results show that forsome tasks, programmers had faster completion times using a static type system, while for others, the opposite held.»&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/de//pubs/archive/42184.pdf&#34;&gt;Programmers’ Build Errors: A Case Study (at Google)&lt;/a&gt; (2014)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;« An analysis of the errors found during the build process revealed that, independent of programming language, approximately 10 percent of the error types account for 90% of the build failures.»&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://madeyski.e-informatyka.pl/download/Madeyski07g.pdf&#34;&gt;Impact of aspect-oriented programming on software development efficiency and design quality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;«It turned out that aspect-oriented programming approach did not significantly affect software design quality metrics i.e. Dn, W OM, CBM, RFM, LCO, NCLOC and NCLOC2. It means that the impact of aspect-oriented programming on software design modularity and size (related to the goal 1) was not confirmed. In fact, the impact of aspectoriented programming on class-level software quality metrics (W OM, CBM, RFM, LCO) as well as on NCLOC and NCLOC2 was extremely weak, as suggested by the obtained effect size &amp;reg; values»&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ces études sont perfectibles à bien des égards mais se pourrait il que les arguments tant vantés par la communauté &lt;em&gt;The Right Thing&lt;/em&gt; ne reposent en fait que sur des impressions, des envies ou des expériences passées ? Ne pourrait elle pas s&amp;rsquo;expliquer par une valorisation personnelle du type «j&amp;rsquo;utilise un langage avec plein de concepts compliqués ce qui me valorise ou m&amp;rsquo;amuse intellectuellent» ?&lt;/p&gt;

&lt;p&gt;Ma &lt;strong&gt;croyance&lt;/strong&gt; est que la simplicité est la clé du développement logiciel, car les objectifs de compréhension, de relecture et de modification sont les plus importantes. Ce qui implique le moins de connaissances à acquérir. Et ce n&amp;rsquo;est il pas finalement dans la recherche à 360 degrés de la simplicité (dans les techniques, les outils et l&amp;rsquo;organisation) que l&amp;rsquo;on peut puiser les meilleurs résultats et non un langage &lt;em&gt;The Right Thing&lt;/em&gt; ? Par exemple :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Un langage adapté aux besoins, possédant une petite spécification et qui ne demande pas de connaissances poussées en logique mathématique.&lt;/li&gt;
&lt;li&gt;La conception pilotée par les tests (TDD) qui pousse à réduire la complexité cyclomatique.&lt;/li&gt;
&lt;li&gt;La revue de code (et pair-programming) qui diminue le code «mappé du cerveau», car compréhensible par d&amp;rsquo;autres.&lt;/li&gt;
&lt;li&gt;Le refactoring pour raffiner le code (cohésion, découplage, extraction ,etc).&lt;/li&gt;
&lt;li&gt;Une taille d&amp;rsquo;équipe réduite et cohérente pour contrôler la complexité relationnelle.&lt;/li&gt;
&lt;li&gt;Le Kanban qui modélise une seule métrique organisationnelle (le temps de cycle)&lt;/li&gt;
&lt;li&gt;Le déploiement continue qui force à un déploiement maitrisé, donc simple.&lt;/li&gt;
&lt;li&gt;Garder une taille de code raisonnable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Et que donc, la qualité passe avant tout par une &lt;strong&gt;culture de la simplicité&lt;/strong&gt; ? Culture qui doit être régulièrement questionnée et travaillée ?&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Un dernier mot sur Rust&lt;/h2&gt;

&lt;p&gt;Un dernier mot sur &lt;a href=&#34;http://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt;, langage en court d&amp;rsquo;élaboration chez Mozilla. Je suis ce langage de près car il me semble être une tentative intéresasnte de rapprochement  de ces deux voies. Exact, complet, cohérent mais tentant de ne pas trop sacrifier la simplicité. Réponse dans un an avec la 1.0&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Expliquer un langage de programmation</title>
      <link>http://douche.name/blog/expliquer-un-langage-de-programmation/</link>
      <pubDate>Tue, 16 Dec 2014 09:00:00 &#43;0200</pubDate>
      
      <guid>http://douche.name/blog/expliquer-un-langage-de-programmation/</guid>
      <description>

&lt;p&gt;Lors d&amp;rsquo;une présentation d&amp;rsquo;un langage de programmation, ou lors d&amp;rsquo;une discussion entre développeurs, il arrive bien souvent que l&amp;rsquo;on utilise les termes «avantage» et «inconvénient». Par exemple, cela peut donner comme argument pour Java : «Java c&amp;rsquo;est cool, tu codes sur la JVM et cela fonctionne sur plusieurs plateformes». Hors pour moi, la JVM est loin d&amp;rsquo;être un avantage. C&amp;rsquo;est gros, lourd, géré par Oracle qui impose des restrictions alacon&amp;hellip; L&amp;rsquo;exemple illustre un défaut dans l&amp;rsquo;argumentation : l&amp;rsquo;utilisation d&amp;rsquo;un &lt;strong&gt;argument subjectif présenté comme objectif&lt;/strong&gt;. Un avantage pour l&amp;rsquo;un peut être un défaut pour l&amp;rsquo;autre, et vice-versa, et la conversation peut donc rapidement tourner à l&amp;rsquo;affrontement stérile de ce qui est positif ou non.&lt;/p&gt;

&lt;p&gt;Pour contrer cela, je voudrais vous présenter une autre approche, qui part de l&amp;rsquo;objectif (ou au moins tente de l&amp;rsquo;être) pour aller vers le subjectif, en détachant bien les deux aspects. Explication.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;«Opportunité» vs «contrainte»&lt;/h2&gt;

&lt;p&gt;Je préfère remplacer avantage vs inconvénient par &lt;strong&gt;opportunité vs contrainte&lt;/strong&gt;, ici avec l&amp;rsquo;exemple de la JVM cité plus haut :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Une contrainte est une &lt;strong&gt;obligation&lt;/strong&gt;, on ne peut y échapper. Coder en Java oblige à utiliser la JVM.&lt;/li&gt;
&lt;li&gt;Une opportunité est une &lt;strong&gt;possibilité&lt;/strong&gt; que l&amp;rsquo;on peut profiter. Utiliser la JVM permet de faire fonctionner son code sur plusieurs plateformes comme Linux ou MacOS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ces 2 points tentent d&amp;rsquo;être objectifs, et peuvent être accepter par ceux qui aiment Java, comme par ses détracteurs. Si vous avez un consensus, alors il est possible de glisser vers la subjectivité car on partage maintenant un &lt;strong&gt;référentiel commun&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est dans l&amp;rsquo;acceptation des contraintes ou dans la recherche d&amp;rsquo;opportunités que le choix de chacun va se faire. Voici 2 courts exemples :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Un amoureux de Scala va apprécier l&amp;rsquo;opportunité de disposer d&amp;rsquo;un code plus solide en production et de refactorer plus facilement son code. Pour cela il acceptera que le compilateur soit strict et lui renvoie de temps en temps des messages d&amp;rsquo;erreur compliqués. Il acceptera aussi une courbe d&amp;rsquo;apprentissage plus lourde et exigeante, une syntaxe un peu alambiquée et une sémantique chargée.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Un amateur de Python va aimer la simplicité syntaxique, la sensation de productivité à court terme. Il devra par contre subir la GIL, être plus vigilant sur sa gestion des erreurs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vous choisirez alors un langage parce que :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;les opportunités offertes sont intéressantes.&lt;/li&gt;
&lt;li&gt;les contraintes sont bloquantes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C&amp;rsquo;est ici que la subjectivité intervient, et qu&amp;rsquo;il fait prendre à chacun de nous des chemins différents. Si je parle de mes propres choix, je pourrais par exemple dire que j&amp;rsquo;envie la capacité de gros refactoring que permet Scala, mais la complexité sémantique me rebute suffisamment pour éliminer le langage des mes choix. Et que si j&amp;rsquo;ai apprécié développer en Python pendant 10 ans, certaines contraintes se font de plus en plus douloureusement ressentir. Nous sommes ici dans la plus parfaite subjectivité. Subjectivité qui dépend de notre expérience, de nos douleurs, de nos envies, de notre travail et de nos objectifs en tant que développeur&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;La volonté des concepteurs&lt;/h2&gt;

&lt;p&gt;Cette dualité «opportunité» vs «contrainte» mets aussi en lumière un point important : les concepteur d&amp;rsquo;un langage de programmation naviguent en permanence entre un équilibre fragile d&amp;rsquo;opportunités et de contraintes. Il est de plus très rare de disposer d&amp;rsquo;une opportunité sans contrainte associée. Faire beaucoup de vérification à la compilation ? Dites alors adieu à une compilation ultra-rapide. Vous voulez un langage avec des concepts avancés de programmation ? Ne vous attendez pas alors à maitriser le langage en 1 an, mais plus en 5 ans, et d&amp;rsquo;avoir de sérieux mal à la tête sur certains messages d&amp;rsquo;erreurs. Tout est question d&amp;rsquo;équilibre. A ma gauche des opportunités, á ma droite des contraintes.&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est maintenant comme cela que je présente un langage, en faisant au préalable, en introduction, l’équivalent du texte que vous venez de lire. Non pas comme une liste d’avantages (que les auditeurs prendront ou nous comme tel), mais comme un ensemble de contraintes et d&amp;rsquo;opportunités, et laissant chacun d&amp;rsquo;entre eux faire leur opinion. Le plus important, je pense, est de montrer en quoi cet équilibre est intéressant.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pourquoi je crois (techniquement) en Google</title>
      <link>http://douche.name/blog/pourquoi-je-crois-techniquement-en-google/</link>
      <pubDate>Mon, 15 Dec 2014 07:29:44 CET</pubDate>
      
      <guid>http://douche.name/blog/pourquoi-je-crois-techniquement-en-google/</guid>
      <description>

&lt;p&gt;Si cela fait des années que je n&amp;rsquo;espère plus rien de Google sur le plan des
libertés, je reste curieux de tout ce qu&amp;rsquo;ils font sur le plan technique,
notamment pour Internet. Car c&amp;rsquo;est pour moi la seule (grosse) boite qui
fait avancer sérieusement les choses. Explication.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;La différence de business model&lt;/h2&gt;

&lt;p&gt;Pour expliquer mon point de vue, il faut d&amp;rsquo;abord parler de &lt;em&gt;business model&lt;/em&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quel est le &lt;em&gt;business model&lt;/em&gt; de Microsoft ? Vous faire utiliser les produits
Microsoft.&lt;/li&gt;
&lt;li&gt;Quel est le &lt;em&gt;business model&lt;/em&gt; d&amp;rsquo;Apple ? Vous faire utiliser les produits
Apple.&lt;/li&gt;
&lt;li&gt;Quel est le &lt;em&gt;business model&lt;/em&gt; de Facebook ? Vous faire utiliser les produits
Facebook.&lt;/li&gt;
&lt;li&gt;Et quel est le &lt;em&gt;business model&lt;/em&gt; de Google ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arrêtez vous 30 secondes pour répondre à cette question. Ça y est ? Alors
reprenons. Son &lt;em&gt;business model&lt;/em&gt; est de vous faire &lt;strong&gt;utiliser Internet&lt;/strong&gt;. Bien sûr,
c&amp;rsquo;est mieux au travers de leurs services mais cela n&amp;rsquo;est pas une obligation.
On l&amp;rsquo;oublie souvent, mais le CA de Google vient en &lt;strong&gt;grande partie&lt;/strong&gt; de la
publicité (90% du CA, 30% du marché mondial de la publicité en ligne, loin
devant Facebook et Yahoo). Ils gagnent donc de l&amp;rsquo;argent quand les gens
vont sur le Net. Et plus l&amp;rsquo;expérience de navigation est plaisante, plus Google
gagne de l&amp;rsquo;argent. Je me souviens d&amp;rsquo;un tweet qui m&amp;rsquo;avait marqué : «Quand
Internet va &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt; de seconde plus vite, Google gagne 1 milliard de dollars de
plus». Je ne peux pas valider son contenu mais j&amp;rsquo;ai trouvé à l&amp;rsquo;époque cette réflexion
intéressante.&lt;/p&gt;

&lt;p&gt;Cela explique toutes les initiatives de Google pour améliorer le Net, non pas
par philanthropie, mais par besoin. Regardons de plus près ce que Google a fait.
Voici une petite liste de mémoire (je pense que l&amp;rsquo;on peut en rajouter bien plus) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La mise à disposition gratuite de CDN pour les librairies Javascript les
plus populaires ainsi qu&amp;rsquo;une longue liste de fontes.&lt;/li&gt;
&lt;li&gt;Le financement de nombreux Logiciels Libres par l&amp;rsquo;intermédiaire du Google
Summer of Code.&lt;/li&gt;
&lt;li&gt;Le développement du Javascript avec le projet v8. Rappelez vous l&amp;rsquo;état
de délabrement du langage avant que Google s&amp;rsquo;en charge (un navigateur
moderne va plus de 100x plus vite que Firefox 2 coté JS).&lt;/li&gt;
&lt;li&gt;Le financement de successeur de HTTP1 (SPDY et HTTP2).&lt;/li&gt;
&lt;li&gt;Le financement des «Web Components» pour standardiser le développement Web.&lt;/li&gt;
&lt;li&gt;Le financement de 2 langages, un backend (Go), l&amp;rsquo;autre frontend (Dart).&lt;/li&gt;
&lt;li&gt;Le financement du framework AngularJS.&lt;/li&gt;
&lt;li&gt;Le financement de la fibre optique dans plusieurs régions des USA.&lt;/li&gt;
&lt;li&gt;La mise à disposition gratuite d&amp;rsquo;une forge (Google Developers).&lt;/li&gt;
&lt;li&gt;La mise à disposition gratuite des formats WebM et WebP, développés en
interne.&lt;/li&gt;
&lt;li&gt;La mise à disposition gratuite d&amp;rsquo;une suite bureautique.&lt;/li&gt;
&lt;li&gt;La mise à disposition gratuite d&amp;rsquo;un large espace de stockage cloud.&lt;/li&gt;
&lt;li&gt;Le développement d&amp;rsquo;un «OS Internet», ChromeOS, pour disposer d&amp;rsquo;un
notebook pas cher.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sans compter le moteur de recherche qui a révolutionné l&amp;rsquo;utilisation du Net.
Bref, je m&amp;rsquo;arrête la mais vous voyez le tableau. Google veut votre confort,
car elle gagnera encore plus d&amp;rsquo;argent. C&amp;rsquo;est pour raison que Google est bien
plus dangereux á mes yeux que Microsoft, ce dernier se bornant à vous
bloquer dans leur techno. Il suffisait donc de trouver mieux (merci Linux
et le Logiciel Libre) pour facilement se libérer. Mais pour Google, c&amp;rsquo;est
une autre histoire. Qui aide autant les développeurs qu&amp;rsquo;eux ? Facebook ?
Apple ? Mozilla ?&lt;/p&gt;

&lt;p&gt;Maintenant regardons de plus près le dernier rebondissement : Angular 2.
Suite à l&amp;rsquo;annonce de la nouvelle version du framework (qui ne sortira qu&amp;rsquo;en
2016), des cris d&amp;rsquo;effroi et de rage se sont fait entendre : Google
se fout de la gueule du monde en cassant la compatibilité et rendra
orphelin tous les utilisateurs de la version 1. Alors prenons un peu de recul.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Petite note&lt;/h2&gt;

&lt;p&gt;Tout d&amp;rsquo;abord, il est intéressant de noter que les projets techniques sont
financés par Google, mais pas «dirigés» par elle. AngularJS est autonome,
comme Go ou Dart. Savez vous ce qu&amp;rsquo;on dit les développeurs de Go quand la
1.0 est sortie ? «Maintenant, on va tenter de &lt;strong&gt;convaincre&lt;/strong&gt; en interne». Bien
que financé par Google (les &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; des core devs sont chez eux), cela ne veut
pas dire que cela rentre dans un projet global. Google finance «pour voir»,
et utilisera potentiellement le projet. C&amp;rsquo;est pour moi sa grande force.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;De GWT à Angular 2&lt;/h2&gt;

&lt;p&gt;Voici, toujours de tête, un petit timeline :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2006 : GWT 1.0, un framework Java pour faire du développement Web.&lt;/li&gt;
&lt;li&gt;2008 : Chrome 1.0 / v8 1.0.&lt;/li&gt;
&lt;li&gt;2009 : AngularJS 1.0.&lt;/li&gt;
&lt;li&gt;2011 : Disponibilité des technologies PNaCI / PNaCI.&lt;/li&gt;
&lt;li&gt;2013 : Dart 1.0, tout nouveau langage pour le Web.&lt;/li&gt;
&lt;li&gt;2013 : Parallèlement à Dart, travail sur les «Web Components» avec Dart Web UI.&lt;/li&gt;
&lt;li&gt;2013 : Normalisation des «Web Components».&lt;/li&gt;
&lt;li&gt;2013 : Lancement de Polymer, librairie de «Web Components» normalisés.&lt;/li&gt;
&lt;li&gt;2013 : Lancement d&amp;rsquo;AngularDart, le pendant Dart d&amp;rsquo;AngularJS.&lt;/li&gt;
&lt;li&gt;2013 : GWT est géré par la communauté (Google continue de payer des core devs).&lt;/li&gt;
&lt;li&gt;2014 : Dart est normalisé (ECMA-408)&lt;/li&gt;
&lt;li&gt;2016 : Angular 2 s&amp;rsquo;appuiera sur ES7/ES8 et l&amp;rsquo;expérience de Dart2JS pour transformer
     le code en JS ou Dart. Il fusionnera les 2 projets AngularJS et AngularDart.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Au lieu de simplement s&amp;rsquo;appuyer sur ES5 (la dernière version officielle JS), l&amp;rsquo;équipe
Angular saute plusieurs cases pour s&amp;rsquo;appuyer directement sur ES7/ES8. Cela fait suite au portage d&amp;rsquo;Angular sur Dart et de l&amp;rsquo;apprentissage qui en découle. D&amp;rsquo;abord dans la possibilité
d&amp;rsquo;avoir un langage plus «moderne» et moins lourd, d&amp;rsquo;autres part dans la transformation
automatique de code du projet Dart2JS (permettant de transformer du code Dart en code ES5).&lt;/p&gt;

&lt;p&gt;Je trouve que c&amp;rsquo;est plutôt cohérent : d&amp;rsquo;un coté ils travaillent sur le futur, avec Dart
comme base d&amp;rsquo;expérimentation, qui a permit notamment l&amp;rsquo;émergence des «Web Components» et
l&amp;rsquo;utilisation de JS comme «assembleur» du Web. Et de l&amp;rsquo;autre, le présent avec le Javascript. Bien sur, il y&amp;rsquo;a pas mal de tâtonnements dans les projets mais globalement, les nouveaux projets pérennisent les avancées, ce qui me semble rassurant.&lt;/p&gt;

&lt;p&gt;Et pour ceux qui ont misés sur AngularJS 1.x, je pense que le projet sera
(à l&amp;rsquo;instar de GWT) transféré à la communauté tout en laissant quelques core devs. Il est
déjà annoncé que AngularJS 1.3 aura 2 ans de support &lt;strong&gt;après&lt;/strong&gt; la sortie de la 2.0 (soit ~2018).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Catalogue formation 2013</title>
      <link>http://douche.name/blog/catalogue-formation-2013/</link>
      <pubDate>Mon, 17 Dec 2012 12:44:00 &#43;0200</pubDate>
      
      <guid>http://douche.name/blog/catalogue-formation-2013/</guid>
      <description>

&lt;p&gt;En septembre 2010, j&amp;rsquo;ai lancé #gitfr pour expliquer les DVCS et Git en
particulier. 2 ans, ~30 présentations et ~10 ateliers plus tard j&amp;rsquo;ai besoin de
parler d&amp;rsquo;autres choses :). Je propose de nouveaux ateliers et présentations sur
des sujets assez variés, que ce soit en développement, administration ou
management. Si vous êtes interéssé par un sujet, il suffit de me contacter pour
se mettre d&amp;rsquo;accord sur un lieu et une date.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt; : Je n&amp;rsquo;ai aucune certification, je ne suis pas estampillé
«Expert machin» ou «Champion truc». Je n&amp;rsquo;ai même jamais eu de formation sur un
quelconque sujet (j&amp;rsquo;ai appris la plupart du temps seul dans mon coin dans le
cadre professionnel).  Ce ne sont que des &lt;strong&gt;modestes retours d&amp;rsquo;expérience&lt;/strong&gt; sur
des sujets qui m&amp;rsquo;intéressent et que je souhaite partager.&lt;/p&gt;

&lt;p&gt;Comme pour #gitfr, le deal est le suivant :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C&amp;rsquo;est &lt;strong&gt;gratuit&lt;/strong&gt; (je demande juste le remboursement des frais de transport
et d&amp;rsquo;hébergement) dans le cadre d&amp;rsquo;une action associative.&lt;/li&gt;
&lt;li&gt;La gestion de l&amp;rsquo;événement est à votre charge (trouver un lieu, accueillir les
gens, etc).&lt;/li&gt;
&lt;li&gt;Etant un utilisateur de Logiciels Libres depuis plus de 15 ans, je me
focalise que sur les plateformes &lt;strong&gt;Linux / BSD&lt;/strong&gt;. Les OS «professionnels» ne
m&amp;rsquo;intéresse pas, ni de prêt ni de loin.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certains ateliers sont plutôt bien avancés, d&amp;rsquo;autres n&amp;rsquo;existent que dans ma tête.
Ne vous étonnez donc pas si je vous réponds qu&amp;rsquo;il me faut plusieurs mois pour
en préparer certains :). J&amp;rsquo;ai mis une petite présentation sans prétention pour
chaque sujet (la plupart sont à l&amp;rsquo;état de brouillon) pour vous donner un aperçu
du contenu et de l&amp;rsquo;objectif recherché. Les durées sont des estimations à la
louche, ne vous focalisez pas trop dessus.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 1&lt;/strong&gt; : Cette page devrait évoluer, n&amp;rsquo;hésitez donc pas à venir de temps en
temps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 2&lt;/strong&gt; : Chaque atelier peut évidemment être transformé en présentation
si c&amp;rsquo;est ce format que vous recherchez. De même, si le sujet vous intéresse
mais qu&amp;rsquo;il manque un contenu particulier, n&amp;rsquo;hésitez pas à en faire la
demande.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 3&lt;/strong&gt; : j&amp;rsquo;ai mis à la fin des idées de sujet. Si vous avez d&amp;rsquo;autres,
postez un commentaire. Si j&amp;rsquo;ai les compétences nécessaires, je tenterai
d&amp;rsquo;en faire quelque chose.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Introduction à la virtualisation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : infra / &lt;strong&gt;Type&lt;/strong&gt; : atelier  / &lt;strong&gt;Durée&lt;/strong&gt;: : 5h&lt;/p&gt;

&lt;p&gt;La virtualisation offre de nombreux avantages, autant pour le développeur qui
peut tester facilement et sans danger son code que pour l&amp;rsquo;administrateur qui
peut gérer une infrastructure avec beaucoup moins de machines.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre les différentes techno de virtualisation&lt;/li&gt;
&lt;li&gt;Apprendre à créer des machines virtualisées&lt;/li&gt;
&lt;li&gt;Déployer une infrastructure virtualisée&lt;/li&gt;
&lt;li&gt;Distribuer des VMs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contenu :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;QEMU / KVM&lt;/li&gt;
&lt;li&gt;LXC&lt;/li&gt;
&lt;li&gt;VirtualBox&lt;/li&gt;
&lt;li&gt;OpenVZ ?&lt;/li&gt;
&lt;li&gt;Xen ?&lt;/li&gt;
&lt;li&gt;Apprentissage des formats d&amp;rsquo;image (RAW, VDI, QCOW2, VMDK)&lt;/li&gt;
&lt;li&gt;Apprentissage du format de description OVF&lt;/li&gt;
&lt;li&gt;Libvirt&lt;/li&gt;
&lt;li&gt;Virt-tools&lt;/li&gt;
&lt;li&gt;Guestfs et sa suite d&amp;rsquo;outils&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : L&amp;rsquo;atelier se focalise principalement sur la techo KVM qui devient la
référence dans le monde du Libre. Je rajoute LXC qui est simple et pratique. Je
ne suis pas sûr pour OpenVZ et Xen.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Monter son cloud avec OpenStack&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : infra / &lt;strong&gt;Type&lt;/strong&gt; : atelier  / &lt;strong&gt;Durée&lt;/strong&gt;: : 5h&lt;/p&gt;

&lt;p&gt;Si Amazon AWS est la référence du cloud, il peut être plus intéressant de
disposer d&amp;rsquo;une technologie que l&amp;rsquo;on maitrise de bout en bout, que ce soit pour
monter un cloud privé ou public. Le projet OpenStack, monté par Rackspace et
dirigé maintenant par une organisation mondiale composée de dizaines de
société, est devenu la technologie cloud Libre la plus en vue.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre l&amp;rsquo;architecture OpenStack&lt;/li&gt;
&lt;li&gt;Installation et configuration&lt;/li&gt;
&lt;li&gt;Déployer une VM&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Gérer son cloud Amazon AWS en Python&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : infra / &lt;strong&gt;Type&lt;/strong&gt; : atelier  / &lt;strong&gt;Durée&lt;/strong&gt;: : 3h&lt;/p&gt;

&lt;p&gt;Aprés une rapide introduction au Cloud IAAS, nous verrons comment en partant de
zéro, mettre en place des machines virtuelles sur Amazon AWS et les exploiter
avec Boto et SaltCloud.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Déployer ses propres images sur le cloud Amazon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contenu :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Présentation rapide d&amp;rsquo;Amazon AWS&lt;/li&gt;
&lt;li&gt;Créer une image Amazon&lt;/li&gt;
&lt;li&gt;Déployer avec Boto&lt;/li&gt;
&lt;li&gt;Déployer avec SaltCloud&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;La virtualisation du réseau&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : infra / &lt;strong&gt;Type&lt;/strong&gt; : atelier  / &lt;strong&gt;Durée&lt;/strong&gt;: : 3h&lt;/p&gt;

&lt;p&gt;Après le IAAS, le PAAS et la SASS, voici le NAAS (Network As A Service). Si
la virtualisation de vos machines est un pas en avant, il manque un élément :
la capacité de gérer aisèment votre réseau qui alimente vos machines
virtualisées. Venez découvrir dans cet atelier OpenVSwitch, la référence
Libre dans le domaine.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre l&amp;rsquo;architecture OpenVSwtich&lt;/li&gt;
&lt;li&gt;Déployer un switch virtuel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contenu :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction à la virtualisation réseau&lt;/li&gt;
&lt;li&gt;OpenFlow et contrôle automatisé&lt;/li&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;li&gt;Configuration de base&lt;/li&gt;
&lt;li&gt;Monitoring : Netflow, sFlow, SPAN, RSPAN&lt;/li&gt;
&lt;li&gt;QoS&lt;/li&gt;
&lt;li&gt;Modification à la volée de paquets&lt;/li&gt;
&lt;li&gt;gestion de VLAN&lt;/li&gt;
&lt;li&gt;Contrôle de votre réseau avec POX / MOX&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Sécuriser votre réseau avec PF&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : infra / &lt;strong&gt;Type&lt;/strong&gt; : atelier  / &lt;strong&gt;Durée&lt;/strong&gt;: : 3h&lt;/p&gt;

&lt;p&gt;Trop souvent, les sociétés ne mettent pas de firewall ou utilisent ceux
intégrés à des produits comme les routeurs Internet. Et quand ils en mettent
un, ce sont des technos propriétaires lourdes. Pourtant, OpenBSD à créer
le pare-feu PF, très simple de mise en place (surtout comparé à son équivalent
Linux Iptables) et agréable d&amp;rsquo;utilisation. Avec PF, la sécurisation est un jeu
d&amp;rsquo;enfant.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre PF&lt;/li&gt;
&lt;li&gt;Déployer un pare-feu&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contenu :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction à la sécurité des réseaux&lt;/li&gt;
&lt;li&gt;Les différents modèles de PF&lt;/li&gt;
&lt;li&gt;Installation d&amp;rsquo;OpenBSD&lt;/li&gt;
&lt;li&gt;Configuration PF simple pour un petit réseau&lt;/li&gt;
&lt;li&gt;Configuration PF simple pour un réseau élaboré&lt;/li&gt;
&lt;li&gt;Configuration PF avancée pour un réseau élaboré&lt;/li&gt;
&lt;li&gt;Mise en place du QOS&lt;/li&gt;
&lt;li&gt;Supervision de son pare-feu&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : L&amp;rsquo;utilisation d&amp;rsquo;un live-CD est envisagée pour sauter l&amp;rsquo;étape
installation.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Développer des scripts en Python&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : développement / &lt;strong&gt;Type&lt;/strong&gt; : atelier  / &lt;strong&gt;Durée&lt;/strong&gt;: : 5h&lt;/p&gt;

&lt;p&gt;Vous écrivez encore vos scripts en Shell à base de cut, grep, awk ? Vous
souffrez pour les maintenir quand ils dépassent 100 lignes ? Venez découvrir
le langage Python qui vous offre l&amp;rsquo;accès à de nombreuses librairies pour
coder des scripts systèmes allié à une maintenance bien plus aisée.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apprendre les bases de Python&lt;/li&gt;
&lt;li&gt;Ecrire de petits programmes (système, graphique, réseau)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contenu :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation de Python&lt;/li&gt;
&lt;li&gt;Premiers pas (variable, affectation, opérateur, expression)&lt;/li&gt;
&lt;li&gt;Contrôle du flux d&amp;rsquo;exécution&lt;/li&gt;
&lt;li&gt;Principaux types de données&lt;/li&gt;
&lt;li&gt;Les fonctions&lt;/li&gt;
&lt;li&gt;Approfondir les structures de données&lt;/li&gt;
&lt;li&gt;La programmation objet en Python&lt;/li&gt;
&lt;li&gt;Maitriser les outils de base : pip, virtualenv&lt;/li&gt;
&lt;li&gt;Introduction à l&amp;rsquo;outil Buildout&lt;/li&gt;
&lt;li&gt;La sémentique Python&lt;/li&gt;
&lt;li&gt;Apprentissage de  quelques modules importants&lt;/li&gt;
&lt;li&gt;Etude de quelques librairies intéressantes&lt;/li&gt;
&lt;li&gt;Débugger du code Python&lt;/li&gt;
&lt;li&gt;Comprendre le packaging Python&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Maitriser le packaging Python&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : développement / &lt;strong&gt;Type&lt;/strong&gt; : atelier  / &lt;strong&gt;Durée&lt;/strong&gt;: : 3h&lt;/p&gt;

&lt;p&gt;Distutils, Setuptools, format source, binaire ou Egg, easy-install, pip,
distribute, PyPI&amp;hellip; Êtes vous perdu ? Si ces mots vous sont inconnus ou vous
donnent mal au crane, cette session est donc pour vous. Des premiers pas
jusqu&amp;rsquo;à la diffusion de vos programmes, cette session vous aide dans vos
premiers pas dans le monde Python.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre le packaging Python&lt;/li&gt;
&lt;li&gt;Maitriser son environnement de travail&lt;/li&gt;
&lt;li&gt;Savoir distribuer ses programmes Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contenu :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Décortiquer le packaging Python (distutils, distribute)&lt;/li&gt;
&lt;li&gt;Outil PIP&lt;/li&gt;
&lt;li&gt;Outil Buildout&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Gérer sa documentation avec Sphinx&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : infra / &lt;strong&gt;Type&lt;/strong&gt; : atelier  / &lt;strong&gt;Durée&lt;/strong&gt;: : 1.5h&lt;/p&gt;

&lt;p&gt;LibreOffice ou Word pour écrire et maintenir de la documentation, c&amp;rsquo;est la
plaie ! Développé originalement pour la documentation officielle Python, Sphinx
vous permet de créer une documentation HTML, PDF ou EPUB simplement et surtout
maintenable puisque tout est sous forme de fichier texte. Il devient alors
possible de gérer sa documentation comme on le fait pour son code : utilisation
du DVCS, revue des pairs, etc.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Créer une documentation HTML et PDF&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Infra : Gérer son parc machine avec Salt&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : infra / &lt;strong&gt;Type&lt;/strong&gt; : atelier  / &lt;strong&gt;Durée&lt;/strong&gt;: : 2h&lt;/p&gt;

&lt;p&gt;Si vous entendez souvent parler de Puppet et Chef, ce n&amp;rsquo;est pas le cas d&amp;rsquo;un
nouveau venu qui se nomme Salt. Intégrant un shell distribué, rapide, facile
d&amp;rsquo;utilisation et aisèment extensible en Python, Salt facilite gradement la
gestion de votre parc de machines.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre l&amp;rsquo;architecture Salt&lt;/li&gt;
&lt;li&gt;Contrôler une machine virtualisée&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contenu :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;li&gt;Configuration basique&lt;/li&gt;
&lt;li&gt;Utiliser quelques modules Salt&lt;/li&gt;
&lt;li&gt;Apprendre à coder un module Salt&lt;/li&gt;
&lt;li&gt;Salt pour le cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;Présentation du langage Go&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : développement / &lt;strong&gt;Type&lt;/strong&gt; : présentation  / &lt;strong&gt;Durée&lt;/strong&gt;: : 1.5h&lt;/p&gt;

&lt;p&gt;La version 1.0 de Go est sortie début 2012. Pourquoi apprendre Go et non Nodejs
ou Erlang ? Qu&amp;rsquo;apporte t&amp;rsquo;il par rapport à Python, Ruby ou PHP ? L&amp;rsquo;objectif de
cette session est de faire le tour de ce langage et de montrer concrétement son
positionnement ainsi ses avantages et incovénients.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Positionner Go par rapport aux autres langages&lt;/li&gt;
&lt;li&gt;Comprendre le modèle objet de Go&lt;/li&gt;
&lt;li&gt;Voir l&amp;rsquo;apport de Go dans la programmation concurrente&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;Atelier Go&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : développement / &lt;strong&gt;Type&lt;/strong&gt; : atelier / &lt;strong&gt;Durée&lt;/strong&gt;: : 5h&lt;/p&gt;

&lt;p&gt;Vous êtes curieux de voir ce que donne ce langage mais vous n&amp;rsquo;avez jamais
osé coder ? Voici un atelier pour s&amp;rsquo;initier.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coder quelques scripts système&lt;/li&gt;
&lt;li&gt;Coder un service réseau concurrent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contenu :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation de Go&lt;/li&gt;
&lt;li&gt;Structuration d&amp;rsquo;un projet&lt;/li&gt;
&lt;li&gt;Types de base (boolean, int, string)&lt;/li&gt;
&lt;li&gt;Types collection (array, slice, map)&lt;/li&gt;
&lt;li&gt;Programmation procédurale (if, switch, for)&lt;/li&gt;
&lt;li&gt;Les fonctions&lt;/li&gt;
&lt;li&gt;Gestion des erreurs&lt;/li&gt;
&lt;li&gt;Programmation orienté objet en Go (custom type, interface, struct)&lt;/li&gt;
&lt;li&gt;Visite de la librairie standard&lt;/li&gt;
&lt;li&gt;Channel et goroutine&lt;/li&gt;
&lt;li&gt;Programmation parallèle&lt;/li&gt;
&lt;li&gt;Test unitaire&lt;/li&gt;
&lt;li&gt;Debuggage d&amp;rsquo;un code Go&lt;/li&gt;
&lt;li&gt;Installation d&amp;rsquo;un package&lt;/li&gt;
&lt;li&gt;Création d&amp;rsquo;un package&lt;/li&gt;
&lt;li&gt;Déploiement d&amp;rsquo;un projet Go&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;Présentation du langage Dart&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : développement / &lt;strong&gt;Type&lt;/strong&gt; : présentation  / &lt;strong&gt;Durée&lt;/strong&gt;: : 1.5h&lt;/p&gt;

&lt;p&gt;Développé d&amp;rsquo;abord comme un projet de R&amp;amp;D par une partie de l&amp;rsquo;équipe v8, Dart
est annoncé le 10 octobre 2011 par Google comme un nouveau langage pour le
web.&lt;/p&gt;

&lt;p&gt;La version 1.0 de Go est sortie début 2012. Pourquoi apprendre Go et non Nodejs
ou Erlang ? Qu&amp;rsquo;apporte t&amp;rsquo;il par rapport à Python, Ruby ou PHP ? L&amp;rsquo;objectif de
cette session est de faire le tour de ce langage et de montrer concrétement son
positionnement ainsi ses avantages et incovénients.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Positionner Dart par rapport à Javascript&lt;/li&gt;
&lt;li&gt;Montrer comment Dart modifie la façon de développer un site web&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Pas avant la sortie de Dart 1.0.&lt;/p&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;Atelier Dart&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : développement / &lt;strong&gt;Type&lt;/strong&gt; : atelier / &lt;strong&gt;Durée&lt;/strong&gt;: : 5h&lt;/p&gt;

&lt;p&gt;Vous êtes curieux de voir ce que donne ce langage mais vous n&amp;rsquo;avez jamais
osé coder ? Voici un atelier pour s&amp;rsquo;initier.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coder une page dynamique (one page website)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contenu :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation de Dart&lt;/li&gt;
&lt;li&gt;1er programme en ligne de commande&lt;/li&gt;
&lt;li&gt;Vérification avec dart-analyser&lt;/li&gt;
&lt;li&gt;Découverte de l&amp;rsquo;éditeur Dart&lt;/li&gt;
&lt;li&gt;Dart natif et Dart2js&lt;/li&gt;
&lt;li&gt;Architecture d&amp;rsquo;application web une page&lt;/li&gt;
&lt;li&gt;Types de base (number, string, boolean, list, map)&lt;/li&gt;
&lt;li&gt;Programmation procédurale (if, while, do while, switch, for)&lt;/li&gt;
&lt;li&gt;Accéder au DOM (dart:html)&lt;/li&gt;
&lt;li&gt;Fonction et closure&lt;/li&gt;
&lt;li&gt;Gestion des erreurs&lt;/li&gt;
&lt;li&gt;Programmation orienté objet en Dart (classe, interface)&lt;/li&gt;
&lt;li&gt;Generics&lt;/li&gt;
&lt;li&gt;Librairie et visibilité&lt;/li&gt;
&lt;li&gt;Programmation concurrente (isolate)&lt;/li&gt;
&lt;li&gt;Organiser son code Dart&lt;/li&gt;
&lt;li&gt;Gestion de package avec pub&lt;/li&gt;
&lt;li&gt;Programmation asynchrone&lt;/li&gt;
&lt;li&gt;Développement d&amp;rsquo;une application Dart coté client&lt;/li&gt;
&lt;li&gt;Développement d&amp;rsquo;une application Dart coté serveur&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Web component&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Test unitaire et Mock&lt;/li&gt;
&lt;li&gt;Debuggage d&amp;rsquo;un code Dart&lt;/li&gt;
&lt;li&gt;Installation d&amp;rsquo;un package&lt;/li&gt;
&lt;li&gt;Création d&amp;rsquo;un package&lt;/li&gt;
&lt;li&gt;Déploiement d&amp;rsquo;un projet Dart&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Pas avant la sortie de Dart 1.0.&lt;/p&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;Retour d&amp;rsquo;expérience sur le deploiement continue&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : management / &lt;strong&gt;Type&lt;/strong&gt; : présentation  / &lt;strong&gt;Durée&lt;/strong&gt;: : 1.5h&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;intégration continue est considérée depuis plusieurs années comme une bonne
pratique de gestion de projet, et sa généralisation dans les équipes de
développement est une avancée notable. Mais pour s&amp;rsquo;assurer que son produit
fonctione, rien ne vaut un déploiement dans un environnement réaliste. D&amp;rsquo;ou
l&amp;rsquo;émergence d&amp;rsquo;une nouvelle pratique : le déploiement continue. Cette session
est un retour d&amp;rsquo;expérience de 3 ans de cette pratique chez un éditeur logiciel.
Nous parlerons d&amp;rsquo;outil d&amp;rsquo;intégration continue et de virtualisation ainsi que
d&amp;rsquo;outil de gestion de source. Nous aborderons aussi la philosophie Devops dont
cette pratique est en droite ligne.&lt;/p&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;Retour d&amp;rsquo;expérience sur la revue de code&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : management / &lt;strong&gt;Type&lt;/strong&gt; : présentation  / &lt;strong&gt;Durée&lt;/strong&gt;: : 1.5h&lt;/p&gt;

&lt;p&gt;Depuis 3 ans, nous pratiquons la revue de code systématique, chaque ligne de
code (ainsi que l&amp;rsquo;infra ou le packaging) étant revue avant de passer en
production. Coûteuse en temps, elle permet néanmoins d&amp;rsquo;augmenter la qualité en
trouvant erreurs et bugs potentiels. Mais surtout, elle permet d&amp;rsquo;aligner
l&amp;rsquo;équipe autour de pratiques communes, en normalisant le code et en échangeant
ses connaissances. Cette session est un retour d&amp;rsquo;expérience de ces années de
pratique : comment mettre en place la revue de code ? Quelles sont les
différentes façons de faire de la revue ? Quel mentalité doit on avoir ?
quelles sont les avantages et inconvénients ? Les bonnes pratiques et les
erreurs à éviter ? Nous passerons également en revue deux Logiciels Libres pour
mettre en place la revue de code : ReviewBoard et Gerrit.&lt;/p&gt;

&lt;h2 id=&#34;toc_15&#34;&gt;Simplifier vous la vie avec Buildout (Python)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : dev / &lt;strong&gt;Type&lt;/strong&gt; : atelier  / &lt;strong&gt;Durée&lt;/strong&gt;: : 3h&lt;/p&gt;

&lt;p&gt;Une difficulté quand on travaille en équipe est d&amp;rsquo;avoir un environnement
parfaitement identique et répétable, surtout qu&amp;rsquo;on possède beaucoup de
composants Python. Il faut bricoler un environnement virtuel, installer les
bonnes versions de chaque composant et modifier le sys.path à la main pour
utiliser ses composants en cours de développement. Et les choses se complique
quand il est nécessaire de disposer des logiciels non Python. Certains
développeurs utilisent l&amp;rsquo;outil Virtualenv associé à l&amp;rsquo;outil PIP. Mais il existe
pourtant un outil bien plus puissant et adapté : Buildout. Sous une doc austère
se cache un outil puissant et efficace, et relativement simple d&amp;rsquo;utilisation
qui permet de reproduire rapidement et efficacement un environnement donné,
grace notamment à un système de plug-ins (appelé recettes). L&amp;rsquo;objectif de cette
session est de vous rendre autonome sur l&amp;rsquo;outil et d&amp;rsquo;apporter en plus un retour
d&amp;rsquo;expérience de 4 ans d&amp;rsquo;utilisation chez un éditeur logiciel où il est utilisé
en sus comme outil de déploiement. Nous aborderons aussi Distutils, Setuptool
et Virtualenv.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre l&amp;rsquo;intéret de ce type d&amp;rsquo;outil&lt;/li&gt;
&lt;li&gt;Passer son projet Python sous Buildout&lt;/li&gt;
&lt;li&gt;Développer avec Buildout&lt;/li&gt;
&lt;li&gt;Déployer avec Buildout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contenu :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fonctionnement de Buildout&lt;/li&gt;
&lt;li&gt;Ajouter des recettes&lt;/li&gt;
&lt;li&gt;Déployer avec Buildout&lt;/li&gt;
&lt;li&gt;Développement de recette&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_16&#34;&gt;Les outils Devops en Python&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : dév / &lt;strong&gt;Type&lt;/strong&gt; : présentation  / &lt;strong&gt;Durée&lt;/strong&gt;: : 2h&lt;/p&gt;

&lt;p&gt;Depuis l&amp;rsquo;éclosion du mouvement Devops, des outils comme Chef ou Puppet sont
omniprésents et tiennent le haut du pavé. Mais du shell distribué aux outils de
déploiement en passant par le Cloud, il existe des outils de très bonnes
qualités en Python. Cette session est un tour d&amp;rsquo;horizon des outils disponibles
: Fabric, Ansible, Buildout, Salt&amp;hellip;&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connaitre les principaux outils en Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contenu :
- Présentation de Fabric
- Présentation de Ansible
- Présentation de Buildout
- Présentation de Salt&lt;/p&gt;

&lt;h2 id=&#34;toc_17&#34;&gt;Présentation de Git&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : dev / &lt;strong&gt;Type&lt;/strong&gt; : présentation  / &lt;strong&gt;Durée&lt;/strong&gt;: : 3h&lt;/p&gt;

&lt;p&gt;Utilisateur de SVN pendant de nombreuses années, j&amp;rsquo;avais la sensation
croissante de me battre avec mon outil de travail. Pire, il s&amp;rsquo;adaptait très mal
à mes exigences collaboratives. De guerre las, nous en avons choisi un outil de
gestion de source décentralisé (Hg puis Git) début 2008. La différence était
flagrante, je me sentais comme libéré d&amp;rsquo;un poids qui me ralentissait, et la
production de l&amp;rsquo;équipe s&amp;rsquo;est fortement améliorée (quantitativement et
qualitativement).&lt;/p&gt;

&lt;p&gt;Cette présentation vous donnera la compréhension nécessaire pour aborder
sereinement l&amp;rsquo;utilisation de Git (et aux DVCS en général) : La première partie
sera consacrée à la théorie, en passant en revue tous les concepts nécessaires
avec l&amp;rsquo;aide de nombreux schémas didactiques. Nous mettrons en pratique nos
nouvelles connaissances dans la seconde partie, en abordant les commandes qui
font la «différence», les workflows, l&amp;rsquo;utilisation de GitHub, le tout saupoudré
de conseils pour bien démarrer.&lt;/p&gt;

&lt;h2 id=&#34;toc_18&#34;&gt;Débuter avec Git&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : dev  / &lt;strong&gt;Type&lt;/strong&gt; : atelier  / &lt;strong&gt;Durée&lt;/strong&gt;: : 5h&lt;/p&gt;

&lt;p&gt;Vous voulez apprendre les bases de Git ? C&amp;rsquo;est session est pour vous. Mixant
théorie et pratique, cette sesion de 3 heures vous donnera les clés pour
comprendre cet outil fanstatique mais un peu rugueux à prendre en main.
Seront passés en revue les 3 concepts fondamendaux ainsi que les différentes
manipulations qu&amp;rsquo;offre Git. Nous terminerons par les commandes de base.&lt;/p&gt;

&lt;h2 id=&#34;toc_19&#34;&gt;Gérer le développment logiciel avec le Kanban&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : management / &lt;strong&gt;Type&lt;/strong&gt; : présentation / &lt;strong&gt;Durée&lt;/strong&gt;: : 2h&lt;/p&gt;

&lt;p&gt;Agiliste forcené depuis de nombreuses années mais non satisfait par
les outils de suivi de projet que j&amp;rsquo;employé jusqu&amp;rsquo;alors, j&amp;rsquo;ai décidé
de passer voici 5 ans, au développement par flux, représenté par l&amp;rsquo;outil
Kanban.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre le développement par flux&lt;/li&gt;
&lt;li&gt;Comprendre l&amp;rsquo;importance du &lt;em&gt;lead time&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Etudier le fonctionnement d&amp;rsquo;un Kanban&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_20&#34;&gt;Petit précis de management à l&amp;rsquo;égard des informaticiens&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : management / &lt;strong&gt;Type&lt;/strong&gt; : présentation  / &lt;strong&gt;Durée&lt;/strong&gt;: : 3h&lt;/p&gt;

&lt;p&gt;«Pourquoi devrais-je m&amp;rsquo;y connaitre en management ? je ne suis pas manager !».
Tel est la remarque que vous pouvez vous faire en lisant le titre.
Et pourtant, le management et l&amp;rsquo;organisation sont les 2 plus importantes
facettes du travail : remplacer «management» par &lt;strong&gt;gestion des hommes&lt;/strong&gt; et
«organisation» par &lt;strong&gt;gestion des relations entre les hommes&lt;/strong&gt; et vous comprendrez
qui est suicidaire de laisser cela à des prétendus managers, qui sans
aucune connaissance de leur métier prennent des décisions qui vous impactent
quotidiennement. Disposer d&amp;rsquo;une culture, même faible, permet de mieux comprendre
votre environnement et d&amp;rsquo;agir en conséquence.&lt;/p&gt;

&lt;p&gt;Objectif :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;S&amp;rsquo;intéresser aux fonctionnement de son entreprise&lt;/li&gt;
&lt;li&gt;Avoir une culture managérial et organisationnel&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_21&#34;&gt;Je veux devenir un manager&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Domaine&lt;/strong&gt; : management / &lt;strong&gt;Type&lt;/strong&gt; : présentation  / &lt;strong&gt;Durée&lt;/strong&gt;: : 5h&lt;/p&gt;

&lt;p&gt;A travers mes 7 ans d&amp;rsquo;expérience en tant que manager (et 8 en ayant subi des
managers), moi qui était au départ le stéréotype de geek seulement intéressé
par ma relation avec les ordinateurs, je vous propose un voyage initiatique
dans le monde fascinant du management.&lt;/p&gt;

&lt;h2 id=&#34;toc_22&#34;&gt;Objectif :&lt;/h2&gt;

&lt;p&gt;Contenu :
- Le management, du 17eme siècle à nos jours
- Le mouvement Lean
- Le mouvement Agile
- System Thinking
- Monter une équipe
- La vision par flux
- Le Kanban&lt;/p&gt;

&lt;h2 id=&#34;toc_23&#34;&gt;Idées&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Monter son premier IPBX avec Asterisk (atelier / 3h)&lt;/li&gt;
&lt;li&gt;Présentation du langage Dart (présentation / 2h)&lt;/li&gt;
&lt;li&gt;Introduction au lanagage Dart (atelier / 3h)&lt;/li&gt;
&lt;li&gt;Debugguer du code Python (présentation / 1h)&lt;/li&gt;
&lt;li&gt;Les libraires du développeur Python (présentation / 2h)&lt;/li&gt;
&lt;li&gt;Apport du mouvement Lean dans le développement logiciel (présentation / 3h)&lt;/li&gt;
&lt;li&gt;Apport du mouvement Agile dans le développement logiciel (présentation / 3h)&lt;/li&gt;
&lt;li&gt;Monter une équipe de développement logiciel (présentation / 2h)&lt;/li&gt;
&lt;li&gt;Développer une application réseau en Python avec 0MQ (atelier / 2h)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Les 5 niveaux de conscience d&#39;un développeur</title>
      <link>http://douche.name/blog/les-5-niveaux-de-conscience-d-un-developpeur/</link>
      <pubDate>Sun, 06 Nov 2011 18:51:00 &#43;0200</pubDate>
      
      <guid>http://douche.name/blog/les-5-niveaux-de-conscience-d-un-developpeur/</guid>
      <description>

&lt;p&gt;On peut juger un développeur sur la compréhension qu&amp;rsquo;il possède de son métier :
5 niveaux qui détermine bien souvent sa plus value pour une organisation.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Niveau 0 : pisser de code&lt;/h2&gt;

&lt;p&gt;Il pense que son boulot est de &lt;strong&gt;produire des lignes et des lignes et des lignes
de code&lt;/strong&gt;. Généralement peu intéressé par ce qu&amp;rsquo;il fait, c&amp;rsquo;est juste un poste
qui paye la soupe. Ou alors c&amp;rsquo;est un boulot temporaire avant de passer chef de
projet.&lt;/p&gt;

&lt;p&gt;Le développeur du niveau 0 se voit très fréquemment et forme le gros du bataillon
des SSII. Chaque fois qu&amp;rsquo;on le rencontre, on se pince les lêvres pour ne pas lui
demander pourquoi il fait ce métier. Mais il faut bien reconnaitre que c&amp;rsquo;est
souvent ce que lui demande son chef de projet&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Niveau 1 : livrer du code&lt;/h2&gt;

&lt;p&gt;Intéressé par la qualité du code, il pense qu&amp;rsquo;il doit &lt;strong&gt;livrer du code
fonctionnel&lt;/strong&gt;. Il s&amp;rsquo;intéresse aux &lt;em&gt;Design Patterns&lt;/em&gt;, lit des livres sur le
développement logiciel, refactore de temps en temps son code pour le rendre
&lt;em&gt;plus beau&lt;/em&gt; et s&amp;rsquo;intéresse aux tests.&lt;/p&gt;

&lt;p&gt;Celui ci peut se rencontrer dans les groupes de développeurs, dans les soirées
consacrés aux codes&amp;hellip; &lt;strong&gt;Il a souvent la passion de son métier&lt;/strong&gt;. Il discute
longuement de code, et lit régulièrement blogs et livres sur le sujet.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Niveau 2 : livrer un logiciel&lt;/h2&gt;

&lt;p&gt;Le développeur &lt;strong&gt;livre un ensemble de code cohérent&lt;/strong&gt;, qui possède une
structure et fonctionne comme un bloc uni. Il s&amp;rsquo;intéresse à la conception, à la
robustesse, à l&amp;rsquo;architecture logicielle. Il sait que les tests sont très
importants, autant unitaire que fonctionnel, avec une couverture suffisante
pour être rassuré quand il modifie des pans entiers du logiciel.&lt;/p&gt;

&lt;p&gt;Le niveau 2 est plus rare. Trop souvent, à la question &lt;em&gt;quel est ton métier&lt;/em&gt;,
un développeur me répond :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Liver du code !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Et non, ton métier est &lt;strong&gt;au minimum&lt;/strong&gt; de livrer un logiciel. Avez vous déja
vu un client satisfait d&amp;rsquo;une livraison d&amp;rsquo;un dépôt Git ?&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Niveau 3 : livrer un produit&lt;/h2&gt;

&lt;p&gt;Le développeur livre plus qu&amp;rsquo;un logiciel, &lt;strong&gt;il livre un produit&lt;/strong&gt;. Il
s&amp;rsquo;intéresse donc à la couche système, aux procédures d&amp;rsquo;installation et de mise
à jour, à la reprise sur incident, à la mise en production. Il participe à la
documentation utilisateur et se met à la place des admins.&lt;/p&gt;

&lt;p&gt;Livrer un produit signifie souvent l&amp;rsquo;abandon du travail d&amp;rsquo;intégration pour un
travail de conception, bien plus difficile. Il faut réfléchir avant
tout à &lt;strong&gt;ses problématiques&lt;/strong&gt; (et non celles que le framework X à résolu pour
vous), au développement sur le long terme et donc à l&amp;rsquo;évolution du produit.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Niveau 4 : livrer de la valeur&lt;/h2&gt;

&lt;p&gt;Plus qu&amp;rsquo;un produit, même bien ficellé, le développeur apporte de la valeur.
Car le réel objectif est &lt;strong&gt;d&amp;rsquo;améliorer le business du client&lt;/strong&gt;. Niveau ultime
et de loin le plus difficile car il demande de bien comprendre le métier du
client en plus de parfaitement maitriser le sein (le développement logiciel).&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Constat&lt;/h2&gt;

&lt;p&gt;Je vous concède que c&amp;rsquo;est un poil schématique. Une des particularités quand
on travaille chez un éditeur logiciel est que le niveau minimum est&amp;hellip; 4.&lt;/p&gt;

&lt;p&gt;Le niveau 3 est malheureusement rare alors que c&amp;rsquo;est pourtant le niveau que tout
développeur devrait atteindre. Mais il faut bien avouer que le développement
logiciel est un métier à la fois très exigeant et nouveau (moins de 40 ans !).&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;autre raison que la plupart des développeurs travaillent en France dans le
service, et peu dans le monde de l&amp;rsquo;édition. Ce qui veut dire bien souvent
être en cascade (peu ou prou, même ceux qui disent faire de l&amp;rsquo;agilité, voir
mon article «l&amp;rsquo;agile est mort») avec un cahier des charges fixe. Il faut
une collaboration étroite avec le client pour échanger sur son business et
comprendre, au dela des besoins exprimés (qui sont le plus souvent des
solutions exprimées et non des besoins), les besoins réels et utiles. Ce qui
est rarement le cas en SSII ou la plupart des clients estiment que ce n&amp;rsquo;est
pas &lt;strong&gt;votre&lt;/strong&gt; boulot de remettre en cause leurs besoins (comment voulez vous
ensuite que les développeurs se sentent conernés ?).&lt;/p&gt;

&lt;p&gt;Je raconte souvent cette anectode :
En tant qu&amp;rsquo;éditeur, il nous a fallu pratiquement &lt;strong&gt;un an entre la première
version commerciale et la version crédible&lt;/strong&gt;. Car nous avons trop misé sur
des clients et partenaires incapables d&amp;rsquo;exprimer clairement des besoins, ce qui
a affecté notre vision du produit. Nous avons donc sorti une version apportant
peu de valeur. C&amp;rsquo;est en rencontrant des partenaires spécialisés et connaissant
bien le métier que nous avons pu rectifier le tir et mieux comprendre ce dont
ils avaient besoin.&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est évidemment de &lt;strong&gt;notre responsabilité&lt;/strong&gt;, et je ne rejète en aucun cas la
faute sur des tierces personnes. Mais cela m&amp;rsquo;a bien un peu éloigné de la sainte
croyance &lt;em&gt;qu&amp;rsquo;il faut écouter le client&lt;/em&gt;. Comme le disait Henry Ford :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Si j&amp;rsquo;avais demandé à mes clients ce qu&amp;rsquo;ils voulaient, ils m&amp;rsquo;auraient réclamé
un meilleur cheval&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Au passage, c&amp;rsquo;est en rencontrant des partenaires et clients Suisses,
Belges, Allemands&amp;hellip; (et non plus Français) que cela s&amp;rsquo;est amélioré :).&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Etre éditeur logiciel, c&amp;rsquo;est être capable de livrer un produit robuste et
fiable rapidement. Il faut maitriser le développement logiciel de bout en bout
: le codage bien sûr mais aussi l&amp;rsquo;infrastructure, la conception, le packaging,
le déploiement, la production, la documentation, le support&amp;hellip; Il faut être
foncièrement multi-compétences et vouloir s&amp;rsquo;améliorer dans tous ces domaines.
Mais ce qui rend le travail si intéressant et dur, c&amp;rsquo;est que vous devez
&lt;strong&gt;aussi&lt;/strong&gt; maitriser votre coeur de métier. Là ou les niveaux 0 à 3 se
focalisent uniquement sur la technique (qu&amp;rsquo;elle soit système, réseau,
algorithmie, ihm, gestion de projet&amp;hellip;)&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est pour cette raison que les &lt;em&gt;livreurs de code&lt;/em&gt;, même excellents, ne sont
bons au final, qu&amp;rsquo;a produire de la dette technique car plus intéressés par la
beauté d&amp;rsquo;un code que de trouver une finalité utile à celle ci.&lt;/p&gt;

&lt;p&gt;Coder dans le cadre professionnel, ce n&amp;rsquo;est pas se faire plaisir avec le
pattern X ou la techno Y, c&amp;rsquo;est avant comprendre un métier et apporter le
maximum de valeur. Même si cela peut sembler inintéressant au premier abord,
livrer un produit fonctionnel, fiable et robuste, utilisé par des clients
heureux est le summum de la satisfaction, bien loin d&amp;rsquo;un algo lisible et
performant. C&amp;rsquo;est ce qui fait tout le charme du métier d&amp;rsquo;éditeur.&lt;/p&gt;

&lt;p&gt;Mais ne me faites pas dire ce que je n&amp;rsquo;ai pas dit, il faut aussi se faire
plaisir en tant que développeur :).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>L&#39;Agile est mort</title>
      <link>http://douche.name/blog/l-agile-est-mort/</link>
      <pubDate>Mon, 08 Aug 2011 03:00:00 CEST</pubDate>
      
      <guid>http://douche.name/blog/l-agile-est-mort/</guid>
      <description>

&lt;p&gt;Sous ce titre qui peut paraitre provocateur se trouve un constat plutôt amère,
d&amp;rsquo;autant plus amère que tout cela était prévisible depuis bien des années.
L&amp;rsquo;Agile est devenu &lt;em&gt;mainstream&lt;/em&gt;, on en parle régulièrement dans les
journaux de décideurs (c&amp;rsquo;est bien la preuve de sa reconnaissance non ?), les
développeurs disent le pratiquer au quotidien, les responsables de projet
assurent en faire. Alors pourquoi ce pessimisme ? Parce qu&amp;rsquo;il ne se passe un
mois sans en avoir la preuve, par exemple quand quelqu&amp;rsquo;un se pose en face de
moi et me dit :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;L&amp;rsquo;agilité, c&amp;rsquo;est vraiment de la merde !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Et cela m&amp;rsquo;arrive très souvent (certes ce n&amp;rsquo;est pas toujours aussi vulgaire).
Il ne faut pas 2 minutes pour savoir que son contexte n&amp;rsquo;est pas Agile, ni de
près, ni de loin. Mais le signe le plus tangible est d&amp;rsquo;entendre des
soit-disant &lt;em&gt;spécialistes&lt;/em&gt; dirent n&amp;rsquo;importe quoi à longueur de blogs,
journaux ou listes de diffusion.&lt;/p&gt;

&lt;p&gt;Oh, je vous vois venir : «mais qui es tu pour définir ce qui est de ce qui
n&amp;rsquo;est pas Agile ?». Excellente question ! En fait, si définir avec précision
les contours de l&amp;rsquo;agilité est difficile, surtout en 2011 où beaucoup de
pratiques ou de mouvements se disent Agile, il est bien plus facile de dire ce
qui n&amp;rsquo;est &lt;strong&gt;pas Agile&lt;/strong&gt; quand c&amp;rsquo;est &lt;strong&gt;aux antipodes de la philosophie qu&amp;rsquo;il veut
incarner&lt;/strong&gt;. Certes le référenciel des pratiques a augmenté, mais il y&amp;rsquo;a toujours des
fondamentaux clairs et bien visibles, et toutes pratiques agiles doivent en
découler. J&amp;rsquo;aime comparer l&amp;rsquo;agilité avec le Logiciel Libre,
deux mouvements auxquels je participe depuis longtemps (10 et 15 ans), car ils
sont dans les deux cas un mélange de technique et d&amp;rsquo;humain. Dans les deux cas,
c&amp;rsquo;est une certaine &lt;strong&gt;représentation du monde&lt;/strong&gt; et des relations entre les
gens :&lt;/p&gt;

&lt;p&gt;Si je diffuse un logiciel avec une licence Libre, par exemple BSD, mais que
je ne propose pas de bugtracker, de liste de diffusion, ou que je refuse toute
contribution extérieure, ou que j&amp;rsquo;obfusque mon code, ou que j&amp;rsquo;envoie sur
les roses les demandes d&amp;rsquo;utilisateurs, je fais du Logiciel Libre (ma licence
le prouve) sur papier. Dans les faits, ce n&amp;rsquo;est qu&amp;rsquo;un ersatz, je ne respecte
pas la philosophie du Logiciel Libre. Il en est de même avec l&amp;rsquo;agilité.&lt;/p&gt;

&lt;p&gt;A mes yeux, l&amp;rsquo;agilité se résume en trois points dont leurs présences sont
faciles à juger.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;La recherche de la valeur&lt;/h2&gt;

&lt;p&gt;Souvent maladroitement appelé &lt;em&gt;un logiciel qui marche&lt;/em&gt;, l&amp;rsquo;objectif est de
donner aux utilisateurs un produit fonctionnel, utilisable et pratique.
Et sauf à produire un logiciel maintes et maintes fois demandée, c&amp;rsquo;est
une découverte, autant pour le client que pour l&amp;rsquo;équipe de développement.
C&amp;rsquo;est donc une utopie de croire que l&amp;rsquo;on peut définir à l&amp;rsquo;avance les
spécifications complètes du logiciel. Le but est avant de trouver ce
logiciel agréable et fonctionnel, et non de le faire vite. La cascade
est à bien des égards l&amp;rsquo;approche la plus efficiente pour faire du logiciel
rapidement :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;J&amp;rsquo;écoute les besoins.&lt;/li&gt;
&lt;li&gt;Je conçois et valide les spécifications.&lt;/li&gt;
&lt;li&gt;Je développe.&lt;/li&gt;
&lt;li&gt;Je teste.&lt;/li&gt;
&lt;li&gt;Je livre.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il n&amp;rsquo;y a pas plus rapide. Si vous faites depuis 20 ans la même chose, pas de
soucis. Je n&amp;rsquo;ai entendu que deux (oui deux, pas trois) sociétés
capables de livrer en temps et en heure avec de 99% succès en mode cascade.
Et sans surprise ce sont deux sociétés développant en Cobol sur une
plateforme assez ancienne des produits fortement similaires. En résumé :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Equipe stable.&lt;/li&gt;
&lt;li&gt;Techno et plateforme archi connues.&lt;/li&gt;
&lt;li&gt;Métier fortement maitrisé.&lt;/li&gt;
&lt;li&gt;Produits similaires.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En sommes, un environnement idéal. Mais il est illusoire d&amp;rsquo;attendre d&amp;rsquo;un
client la capacité à définir avec précision ses besoins. Non seulement il
ne sait pas ce qu&amp;rsquo;il veut, mais il se rend souvent compte après coup que
ce qu&amp;rsquo;il a réussi à expliquer est sans intérêt ! Voire même que son business
ou ses besoins ont changés entre le début du développement et sa fin. Et je
ne parle même pas de la capacité d&amp;rsquo;une équipe de développement à livrer un
produit de bonne qualité d&amp;rsquo;une seule traite, surtout si c&amp;rsquo;est en découvrant
le métier du client. Bref, pour résumer, c&amp;rsquo;est utopique. Mettons cela sur
l&amp;rsquo;immaturité de notre métier, la jeunesse de nos outils et une formation
trop basique.&lt;/p&gt;

&lt;p&gt;Au contraire, l&amp;rsquo;agilité se veut une quête de sens :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Que dois je obtenir ?&lt;/li&gt;
&lt;li&gt;Quelles sont les fonctionnalités réellement utiles ?&lt;/li&gt;
&lt;li&gt;Ce besoin est il justifié ? N&amp;rsquo;est elle pas le symptôme d&amp;rsquo;un problème
non technique ?&lt;/li&gt;
&lt;li&gt;Voir même, ce logiciel est il utile ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C&amp;rsquo;est un effort collectif, allant du développeur jusqu&amp;rsquo;au client pour
comprendre, analyser et développer de la valeur métier  à travers un
logiciel. Sans cela, vous faites de la cascade : on se met d&amp;rsquo;accord sur
une limite fonctionnelle, numéraire et temporelle et zou !&lt;/p&gt;

&lt;p&gt;Passons au deuxième point.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;L&amp;rsquo;humain est au centre&lt;/h2&gt;

&lt;p&gt;Ce qui ressort aussi est cette volonté permanente de mettre en
avant les personnes, et non les outils ou les processus. les seconds sont
aux services des premiers, et pas l&amp;rsquo;inverse ! Le développement est une
histoire de développeurs avant tout. Vous devez &lt;strong&gt;faire confiance aux gens,
les respecter dans leur capacité à produire, dans leur jugement&lt;/strong&gt;. Cet accent
me semble t&amp;rsquo;il est absent des approches précédentes comme la cascade ou RUP.
Ces dernières sont plutôt axées processus, avec des dizaines de procédures
et de la documentation à profusion, le développeur n&amp;rsquo;étant qu&amp;rsquo;un rouage du
système.&lt;/p&gt;

&lt;p&gt;CMMi est un bon exemple de cette vision : la documentation officielle parle
sempiternellement d&amp;rsquo;organisation et de processus. Et pire, il faut être
certifié CMMi pour savoir lire une doc CMMi (cherchez l&amp;rsquo;erreur) tellement elle
est inbitable et truffée d&amp;rsquo;une terminologie incompréhensible. D&amp;rsquo;ailleurs la
plupart font du cascade, c&amp;rsquo;est dire leur croyance dans les processus. Il
faudra attendre 2010 pour entendre le CEI parler sérieusement d&amp;rsquo;agilité, 11
ans après le livre de Ken Beck !&lt;/p&gt;

&lt;p&gt;Au contraire, l&amp;rsquo;agilité privilégie l&amp;rsquo;interaction sur le processus, le
résultat sur la documentation, en rapprochant physiquement tous les
participants, en  poussant les réunions courtes mais régulières, et en
écoutant les gens.&lt;/p&gt;

&lt;p&gt;Passons maintenant au troisième point.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Le développement est une discipline&lt;/h2&gt;

&lt;p&gt;Le développeur remis en selle comme moteur du développement, on lui demande
en échange de maitriser son métier : on veut du logiciel qui fonctionne ! Il
doit remettre sans cesse se remettre en cause, apprendre à faire mieux et à
affiner ses techniques de développement.&lt;/p&gt;

&lt;p&gt;Le milieu logiciel aime bien se traiter d&amp;rsquo;artisan (chaque profession aime se
dépeindre avec élégance) mais cela est identique chez les livreurs, les
boulangers, les cuisiniers, les musiciens&amp;hellip; Mis à part que le développement
logiciel est un métier non seulement très complexe mais en plus à ces
balbutiements : 60 ans. Cela est bien peu.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;agilité apporte beaucoup de solutions intéressantes : le TDD, les tests,
la revue par les pairs, l&amp;rsquo;intégration continue ou le refactoring par exemple.
Bien sûr un développeur peut très bien travailler correctement depuis très
longtemps sans avoir jamais lu un seul livre sur l&amp;rsquo;agilité. Après tout Ken
Beck et ses accolytes ont découvert ces techniques, pourquoi pas les autres ?
Certes, mais se passer de l&amp;rsquo;agilité, c&amp;rsquo;est mettre de coté des années de
réflexion sur les pratiques de développement logiciel et ca serait bien
dommage.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Alors, pourquoi dire que l&amp;rsquo;Agile est mort ?&lt;/h2&gt;

&lt;p&gt;je ne suis malheureusement pas assez vieux pour savoir ce qui se passait dans
les années 70, 80 et 90 dans l&amp;rsquo;industrie du logiciel mais je ne crois pas me
tromper en disant que l&amp;rsquo;agilité est une étape marquante. Je suis malgré
tout un vieux Geek, j&amp;rsquo;achetais pas mal de livres sur la programmation voici 20
ans et je n&amp;rsquo;ai aucun souvenir des livres (en France en tout cas !) qui
ressemblaient peu ou prou à l&amp;rsquo;agilité, on apprenait plutôt en copiant le code
des &lt;em&gt;maitres&lt;/em&gt; (en crackant des logiciels, en écoutant les démo-makers ou en
bavardant sur les BBS). Des pratiques quasi inconnues voici 10 ans sont
maintenant considérées comme des pratiques indispensables (vous faisiez
beaucoup de tests unitaires en 2000 ?).&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;agilité a &lt;strong&gt;apporté la lumière à des milliers de développeurs&lt;/strong&gt;, dont moi,
et à fait progresser notre connaissance de notre métier, en construisant
pour la première fois un socle stable. Nous en sommes encore au début mais
nous tentons chaque jour de mieux comprendre ce métier Ô combien difficile.&lt;/p&gt;

&lt;p&gt;Mais vous savez quoi ? &lt;strong&gt;Tout le monde s&amp;rsquo;en fout !&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;L&amp;rsquo;Agile est la nouvelle technique à la mode&lt;/h2&gt;

&lt;p&gt;On s&amp;rsquo;aperçoit rapidement qu&amp;rsquo;une majorité d&amp;rsquo;organisations utilise l&amp;rsquo;Agile
parce qu&amp;rsquo;ils ont entendus que ça marche mais se foutent royalement de ce
qu&amp;rsquo;il y a dedans. Et pour cause, cela signifie aussi remettre à cause
deux visions fondamentales dans nos entreprises :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;L&amp;rsquo;informatique est un coût, pas un investissement.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Les employés sont interchangeables, et non le socle de l&amp;rsquo;entreprise.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ne voulant pas remettre en cause ces deux postulats, il ne peut en
résulter qu&amp;rsquo;un dévoiement du mouvement Agile. Et c&amp;rsquo;est ce qui se passe.
&lt;strong&gt;L&amp;rsquo;Agile est donc une mode&lt;/strong&gt;, qui passe après le développement objet,
les Design Patterns, le C++, Java, les frameworks, RUP et quelques
autres. On verra dans quelques années fleurir de nouvelles modes quand les
promesses des vendeurs Agiles se seront écrasé sur le mur de la réalité
des entreprises.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Mais que font ils ?&lt;/h2&gt;

&lt;p&gt;Du développement &lt;strong&gt;itératif et incrémental&lt;/strong&gt;. Ils découpent leurs
développements en lots plus petits, avec vérification régulière. Le rapport
avec l&amp;rsquo;Agile tel que je le décris au début du billet ? Aucun ! Faire
confiance aux gens ? Soyons sérieux, ils pratiquent régulièrement
le &lt;em&gt;command &amp;amp; control&lt;/em&gt;, technique qui consiste à faire travailler les
gens comme des marionnettes, et les accuser de faire du mauvais
boulot en cas de pépin. Voir le développement comme une discipline ? Vous
parlez de ces directions des achats qui écrasent le prix journalier des
développeurs vers le bas ? Quand à la recherche de la valeur, cela
signifie remettre douloureusement en cause le fonctionnement de l&amp;rsquo;organisation.&lt;/p&gt;

&lt;p&gt;Vous commencez à me comprendre ? Ce n&amp;rsquo;est d&amp;rsquo;ailleurs pas pour rien que l&amp;rsquo;on
vend du Scrum, qui consiste à faire des lots (appelé itération) avec démo
régulière qu&amp;rsquo;on soupoudre avec une réunion quotidienne et une rétrospective
de temps en temps. Le tour est joué, on fait de l&amp;rsquo;Agile !&lt;/p&gt;

&lt;p&gt;Dites moi si ces quelques exemples vous dit quelques choses :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Le Chef de projet est appellé ScrumMaster, parce qu&amp;rsquo;il a fait 2 jours de
formation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On n&amp;rsquo;évalue pas la pertinence business d&amp;rsquo;une fonctionnalité.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On a pris des développeurs sous qualifiés ou inexpérimentés car par chers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Le pair-programming ou la revue de code ? Trop cher et inutile.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Le ScrumMaster assigne les tâches à chaque réunion quotidienne.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La rétrospective se fait avec le client.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Un cahier des charges est construit avant de développer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On ne prend jamais le temps de revoir les parties qui posent problèmes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On doit travailler tard pour rattraper le retard ou gérer les nouvelles
demandes du marketing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Le projet va dans le mur mais on ne fait rien.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On micro-manage les gens.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On découpe le projet en équipe qui ne se voit pas.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On ne fait pas monter en compétence les membres de l&amp;rsquo;équipe.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Je pourrais ajouter bien d&amp;rsquo;autres exemples, mais vous voyez l&amp;rsquo;idée. Où est la
philosophie Agile ? Absente, car les organisations ne souhaitent pas changer
leur vision du développement logiciel, encore moins leur mode de fonctionnement.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Pourquoi en faire ?&lt;/h2&gt;

&lt;p&gt;Parce que ça se vend, pardi ! Des sociétés de conseils se sont placés sur
le marché, des associations se sont créés pour développer ce business. Alors
ca se vend, et plutôt bien maintenant.&lt;/p&gt;

&lt;p&gt;Mais comment faire de l&amp;rsquo;Agile :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;dans un environnement &lt;em&gt;command &amp;amp; control&lt;/em&gt; ?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;dans une culture du blâme et de la recherche du coupable, ou chaque
responsable sort son parapluie au moindre soucis ?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;quand on vous donne un cahier des charges sans remise en cause du besoin
business ?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En le triturant pour que cela rentre dans les cases. Un exemple ? La grande
&lt;strong&gt;tartuferie&lt;/strong&gt; du développement Agile au forfait. Regardons de plus près : le
forfait consiste à définir une limite fonctionnelle, temporelle et numéraire
d&amp;rsquo;un développement. Cela vous rappelle quelque chose ? Pas pour rien que le
forfait agile est un serpent de mer dans toutes les conférences Agile depuis
des années, tous les responsables de SSII se demandant comment en faire.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;L&amp;rsquo;Agile est mort en 2001&lt;/h2&gt;

&lt;p&gt;Plus précisemment en &lt;strong&gt;février 2001&lt;/strong&gt;, à Snowbird Utah USA. C&amp;rsquo;est la
création du &lt;em&gt;Manifeste Agile&lt;/em&gt; et de l&amp;rsquo;emploi du terme Agile. Plus généralement,
c&amp;rsquo;est une volonté de mettre en place un &lt;strong&gt;modèle&lt;/strong&gt;, un cadre. C&amp;rsquo;est à partir
de 2002 que l&amp;rsquo;on voit fleurir les livres avec le terme agile dans le titre.&lt;/p&gt;

&lt;p&gt;Cela peut paraitre surprenant de dire cela, puisque c&amp;rsquo;est aussi le début du
mouvement Agile. L&amp;rsquo;objectif de normaliser termes et principes, de les figer,
est avant tout pour mieux le vendre. Il est curieux de voir &lt;strong&gt;17 consultants
sur les 17 signataires du manifeste&lt;/strong&gt; : tous vendent des livres, tous vendent
des formations. L&amp;rsquo;Agile Alliance fut créée dans la foulée pour en faire la
promotion.&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Un modèle sclérosé&lt;/h2&gt;

&lt;p&gt;Résultat en 2011 ? Malgré quelques avancées, le discours Agile officiel est
proche de 2001. N&amp;rsquo;a t on rien appris en 10 ans ? Bien sûr que si : le
développement par flux, la prise en compte de l&amp;rsquo;organisation dans le
développement ne sont que deux  exemples fondamentaux. Mais pourtant, le modèle
Agile reste assez hémertique à ces changements. On a bien vu quelques
nouveautés mais rien de bien méchant. Pourquoi ? Parce qu&amp;rsquo;on est plus
intéressé à vendre qu&amp;rsquo;à réfléchir, car pour réfléchir &lt;strong&gt;il faut avant tout
faire&lt;/strong&gt; ! Ce n&amp;rsquo;est pas en écrivant des livres et en faisant du consulting
qu&amp;rsquo;on peut produire. XP est le résultat de très nombreuses années de
pratique de développement logiciel. Taiichi Ono (fondateur du &lt;em&gt;Toyota
Production System&lt;/em&gt;) à passé plusieurs décennies pour perfectionner son
organisation. Il ne faisait surement pas passer des certifications TPS 5 ans
après avoir débuté sa nouvelle organisation !&lt;/p&gt;

&lt;p&gt;Il y a bien eu un déplacement léger du développeur vers l&amp;rsquo;organisation. Même
si le modèle Agile s&amp;rsquo;ouvre sur l&amp;rsquo;extérieur, cela reste limité : il suffit
de voir le rôle du &lt;em&gt;PO&lt;/em&gt; (Product Owner), proxy du reste de la société, où
se trouvent des &lt;em&gt;stakeholders&lt;/em&gt;. Ou est le marketing commercial ? Technique ?
La recherche de nouveaux marchés ? Le déploiement ? L&amp;rsquo;opérationnel ?
L&amp;rsquo;expérience utilisateur ? Le design ? En gros, où est tout le reste ?!
Le vide, les têtes pensantes du modèle Agile sont encore à rabacher TDD et
planning poker, la belle affaire !&lt;/p&gt;

&lt;p&gt;Pire, ce léger déplacement est contre balancé par le &lt;strong&gt;mouvement craftmanship&lt;/strong&gt;,
qui se veut un retour au source, auto-centré sur le développeur. La seule
avancée intéressante vient de partir à l&amp;rsquo;eau ! Si vous voulez savoir pourquoi,
regardez juste le business du fondateur de mouvement, Bob Martin, vendeur
de livres et de formations&amp;hellip; sur le code. Forcément, l&amp;rsquo;organisation, ce n&amp;rsquo;est
pas utile pour son business. Il est d&amp;rsquo;ailleurs marrant d&amp;rsquo;entendre certains se
pâmer devant ce mouvement comme ci c&amp;rsquo;était nouveau. XP disait peu ou prou la
même chose  voici 13 ans. Ce n&amp;rsquo;est d&amp;rsquo;ailleurs pas anodin que ce soit
majoritairement des Scrumistes qui ont font (en France) la promotion, alors
qu&amp;rsquo;ils critiquaient XP ouvertement.&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;J&amp;rsquo;espère avoir éclairci mon propos sur Twitter (140 caractères, c&amp;rsquo;est des
fois trop court :). Non, il ne faut pas arrêter de faire des tests,
du pair programming ou des réunions quotidiennes. Et non, il ne faut surtout
pas minimiser l&amp;rsquo;impact de l&amp;rsquo;agilité sur notre métier, bien au contraire ! Je
vous encourage à lire livres et blogs et à prendre ce dont vous avez besoin.&lt;/p&gt;

&lt;p&gt;Il faut seulement avoir une vision systémique du mouvement, comprendre d&amp;rsquo;où
il vient, pourquoi il a été créé et pourquoi certaines personnes vendent le
modèle Agile. Cela permet par exemple de comprendre le &lt;em&gt;Manifeste Agile&lt;/em&gt;
au lieu de répéter bêtement son contenu qui est loin d&amp;rsquo;être optimal en 2011.
Cela permet aussi de comprendre que ce modèle créé en 2001 (Scrum en 96, XP
en 99) et qui a mis du temps à se propager n&amp;rsquo;apporte plus rien de neuf
depuis de nombreuses années. Si l&amp;rsquo;argent fut toujours le moteur, le modèle
est maintenant dévoyé &lt;strong&gt;pour rentrer dans la matrice consulting&lt;/strong&gt;, loin des
objectifs initiaux. Et ni les voix &lt;em&gt;officielles&lt;/em&gt; (Agile Alliance, Scrum
Alliance), ni ses &lt;em&gt;têtes pensantes&lt;/em&gt; se sont élevés contre cela. Pire, elles
ont participé activement à ce dévoiement (qui a dit certification ?).&lt;/p&gt;

&lt;p&gt;Je pourrais résumer ma pensée ainsi : &lt;strong&gt;L&amp;rsquo;agilité est une avancée importante,
mais le modèle Agile est inutile&lt;/strong&gt;. C&amp;rsquo;est peut être le destin de tout
modèle. En tout cas il est temps que chaque organisation invente, à l&amp;rsquo;instar de
Toyota, son propre modèle de production. Un modèle &lt;strong&gt;adapté à son business,
ses clients, ses collaborateurs&lt;/strong&gt;. Un modèle qui &lt;strong&gt;prend en compte toutes les
nouvelles avancées&lt;/strong&gt; que l&amp;rsquo;on peut trouver dans les mouvements tels que Devops,
Lean, Lean startup ou Kanban. Un modèle &lt;strong&gt;qui évolue&lt;/strong&gt; sans cesse avec la
maturité et la capacité de l&amp;rsquo;organisation à produire.&lt;/p&gt;

&lt;p&gt;Mais pour essayer de le faire sans relâche depuis 4 ans, je vous concède que
c&amp;rsquo;est bien plus difficile et pénible qu&amp;rsquo;une formation de 2 jours ou de
répéter à l&amp;rsquo;envie ce que l&amp;rsquo;on a lu dans un livre&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nouveau blog avec Blogofile</title>
      <link>http://douche.name/blog/nouveau-blog-avec-blogofile/</link>
      <pubDate>Fri, 15 Jul 2011 02:00:00 CEST</pubDate>
      
      <guid>http://douche.name/blog/nouveau-blog-avec-blogofile/</guid>
      <description>

&lt;p&gt;Cela faisait quelques temps que cela me titillait : écrire des billets avec
mon éditeur texte habituel, et de pousser en prod avec Git. C&amp;rsquo;est le blog
de &lt;a href=&#34;http://gitfr.net/blog&#34;&gt;#gitfr&lt;/a&gt; qui m&amp;rsquo;a donné le courage de m&amp;rsquo;y mettre.
Et c&amp;rsquo;est maintenant chose faites. Adieu Wordpress, boujour Blogofile !&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Mais qu&amp;rsquo;utilises tu ?&lt;/h2&gt;

&lt;p&gt;Un générateur statique de site, autrement un outil qui transforme les
documents textes (format &lt;code&gt;markdown&lt;/code&gt; ou &lt;code&gt;rst&lt;/code&gt;) en pages html, à l&amp;rsquo;aide de
templates.&lt;/p&gt;

&lt;p&gt;Beaucoup d&amp;rsquo;avantages :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tout se trouve dans des fichiers textes.&lt;/li&gt;
&lt;li&gt;Plus besoin d&amp;rsquo;être en ligne.&lt;/li&gt;
&lt;li&gt;Ecriture avec Vim et non un éditeur WYSIWIG dans un navigateur.&lt;/li&gt;
&lt;li&gt;Maintenance pratiquement nulle.&lt;/li&gt;
&lt;li&gt;Plus de problème de sécurité.&lt;/li&gt;
&lt;li&gt;Sauvegarde automatique sur GitHub.&lt;/li&gt;
&lt;li&gt;Liberté totale sur l&amp;rsquo;organisation du site.&lt;/li&gt;
&lt;li&gt;Hébergement simplifiée (plus besoin de PHP, Python&amp;hellip;).&lt;/li&gt;
&lt;li&gt;Et bien sûr, utilisation de Git pour gérer le site :).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En contre partie, vous n&amp;rsquo;avez plus la facilité de créer un joli site en 2
clicks de souris. La, c&amp;rsquo;est à vous de créer votre template et de développer
les services supplémentaires (affichage de tweets par exemple).&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Un retour en arrière ?&lt;/h2&gt;

&lt;p&gt;Je faisais du statique en 96 quand j&amp;rsquo;apprenais l&amp;rsquo;html 3 (ou 2 je ne sais
plus), et voila que je refais du statique en 2011, est ce vraiment
raisonnable ? Il y&amp;rsquo;a en fait un changement important qui permet ce retour
aux sources : le &lt;strong&gt;cloud&lt;/strong&gt;. Pour disposer d&amp;rsquo;un blog, il faut un moteur de rendu
de billets, mais aussi un système de commentaires, la gestion de flux RSS,
le multi-compte, des droits et authorisations, etc.&lt;/p&gt;

&lt;p&gt;Maintenant, vous pouvez externaliser tous les services importants :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;les commentaires : Disqus.&lt;/li&gt;
&lt;li&gt;les flux RSS : Feedburner.&lt;/li&gt;
&lt;li&gt;Suivi d&amp;rsquo;activité : Google Analytics.&lt;/li&gt;
&lt;li&gt;Hébergement, backup, droit et travail collaboratif : GitHub.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cela permet de se concentrer sur l&amp;rsquo;essentiel : écrire du contenu.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Organisation&lt;/h2&gt;

&lt;p&gt;Il me faut deux dépôts. Pourquoi deux ? Ce n&amp;rsquo;est pas obligatoire bien sûr,
mais j&amp;rsquo;utilise le service d&amp;rsquo;hébergement gratuit de pages statiques de
&lt;em&gt;GitHub&lt;/em&gt;. Ce dernier impose des contraintes, dont le nom du dépôt et
l&amp;rsquo;emplacement des fichiers. Si vous hébergé vous même le site, un seul dépôt
est suffisant.&lt;/p&gt;

&lt;p&gt;Pour les utilisateurs de &lt;code&gt;Git&lt;/code&gt;, les &lt;em&gt;submodules&lt;/em&gt; font parfaitement
l&amp;rsquo;affaire puisque la version générée se trouve dans un sous répertoire.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Un exemple ?&lt;/h2&gt;

&lt;p&gt;La mise en production se fait comme suit :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /path/to/blogofile/blogofile build
$ git add _site/*
$ git commit -m &amp;quot;nouveau billet sur Blogofile&amp;quot;
$ git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(sans submodules, il suffit de copier le contenu manuellement).&lt;/p&gt;

&lt;p&gt;Et voila ! Je vous laisse imaginer les possibilités intéressantes qu&amp;rsquo;offrent
un DVCS comme &lt;em&gt;Git&lt;/em&gt; ou &lt;em&gt;Hg&lt;/em&gt; (si ce n&amp;rsquo;est pas le cas, vous êtes bon pour voir une
de mes présentations Git ;) pour gérer votre site.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Pourquoi Blogofile ?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Parce qu&amp;rsquo;il est en Python, et cela me permet de coder dans mon langage préféré
et d&amp;rsquo;apprendre des moteurs de templates que je ne connaissais pas (&lt;em&gt;Mako&lt;/em&gt; et
bientôt &lt;em&gt;jinja2&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parce qu&amp;rsquo;il est vraiment simple. Pas fioritures, il va à l&amp;rsquo;essentiel. Ecrire
des controlleurs ne semblent vraiment pas dur et les quelques fonctionnalités
dont j&amp;rsquo;avais besoin (Disqus, flux RSS et blog) sont là. Un site de base tiens
dans 700 lignes de code Python, ce qui rend la compréhension aisé. Blogofile
fait pour sa part 900 lignes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Il permet de gérer les documents drafts, le multi-auteur ou les
transformations multiples.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parce que je sature un peu de Ruby. Utilisant pas mal d&amp;rsquo;outils codés en
Ruby ces derniers temps, je commençais en avoir ras la casquette des
erreurs d&amp;rsquo;installation ou des messages d&amp;rsquo;erreur complètement abscons. Mais
des outils comme Jekyll ou Toto semblent pas mal du tout, j&amp;rsquo;ai fais joué
ma fibre Pythonienne.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alors, si vous avez un site à monter, je vous conseille fortement de jeter un oeil
sur ces logiciels, cela peut vous intéresser ! :).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Un retour sur Pomodoro</title>
      <link>http://douche.name/blog/un-retour-sur-pomodoro/</link>
      <pubDate>Fri, 01 Jan 2010 05:45:00 &#43;0200</pubDate>
      
      <guid>http://douche.name/blog/un-retour-sur-pomodoro/</guid>
      <description>

&lt;p&gt;Cela fait maintenant plusieurs semaines que j&amp;rsquo;utilise la technique &lt;a href=&#34;http://www.pomodorotechnique.com/&#34;&gt;Pomodoro&lt;/a&gt;, qui consiste (en gros) à découper le temps par tranche de 30 minutes : 25 minutes de travail puis 5 minutes de repos. D&amp;rsquo;abord trés sceptique, je suis devenu un partisan convaincu.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Pourquoi tenter Pomodoro ?&lt;/h2&gt;

&lt;p&gt;Au boulot, j&amp;rsquo;ai constaté une dégradation progressive de mon efficacité, c&amp;rsquo;est à dire de ma capacité à produire de la valeur. Je dois selon les moments trouver des idées, réfléchir à des actions ou tout simplement agir. Pire, j&amp;rsquo;endosse différents rôles bien différent les uns des autres, ce qui accentue la difficulté : les tâches n&amp;rsquo;ont aucune relation entre elles, demande un état d&amp;rsquo;esprit adpaté, des connaissances différentes&amp;hellip; Bref,  ce n&amp;rsquo;est pas simple.&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;ai tenté plusieurs approches sans réussite comme jouer un rôle par jour : pas vraiment réaliste, on arrive vite à des situations de gachis extrême (exemple : tâches trop peu nombreuses pour la journée). Autre technique, la procrastination :). En gros, laisser courir le plus longtemps possible. Facile, mais pas efficace pour un sou. Bref, rien de convainquant, en retournant ça dans tous les sens, je n&amp;rsquo;ai guère le choix : abondonner certains aspects de mon travail ou trouver une méthode plus efficace. C&amp;rsquo;est la que j&amp;rsquo;ai tenté cette technique.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Ce qui repousse à priori&lt;/h2&gt;

&lt;p&gt;Le découpage en 25 minutes pardi ! &amp;ldquo;25 minutes, c&amp;rsquo;est bien trop court pour faire quoi que ce soit&amp;rdquo; est la première remarque qui vient à l&amp;rsquo;esprit. Ensuite le coté stressant de la chose, ce sentiment d&amp;rsquo;être minuté en permanence. Pas réjouissant. Enfin cet envie de repousser toute pratique qui demande à changer ses habitudes, surtout quand c&amp;rsquo;est 10 heures par jour&amp;hellip; tous les jours.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Un outillage adapté&lt;/h2&gt;

&lt;p&gt;J&amp;rsquo;ai commencé par chercher une solution de chronométrage. L&amp;rsquo;idée d&amp;rsquo;avoir un chrono &amp;ldquo;physique&amp;rdquo; me semblait pas pratique, je ne me voyais pas en train de m&amp;rsquo;occuper du compteur régulièrement. J&amp;rsquo;ai donc cherché une version logicielle, fonctionnement bien sûr sous &lt;em&gt;Linux&lt;/em&gt; (natif ou web).&lt;/p&gt;

&lt;p&gt;Après quelques dizaines de minutes et plusieurs tests non concluants, je suis tombé sur &lt;a href=&#34;http://www.workrave.org/welcome/&#34;&gt;Workrave&lt;/a&gt;. D&amp;rsquo;abord interloqué par la taille de l&amp;rsquo;engin (presque 7 Mo !), j&amp;rsquo;ai vite changé d&amp;rsquo;avis. Simple d&amp;rsquo;utilisation, il apporte quelques plus dont je n&amp;rsquo;avais pas imaginé en me lançant dans l&amp;rsquo;aventure :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;il bloque (option modifiable) le clavier pendant la pause, vous obligeant à vous arrêter. Cela semble ridicule mais quand on accepte difficilement de lâcher le clavier cela aide.&lt;/li&gt;
&lt;li&gt;il affiche des exercices pendant la pause (je vous laisse deviner la tête de mes collègues :).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Les raisons du succès&lt;/h2&gt;

&lt;p&gt;Mais alors, pourquoi cela marche ? Et bien c&amp;rsquo;est simple :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;il est difficile de garder sa concentration sur une longue période (les études disent souvent 45 minutes). Vous obliger à prendre une pause régulièrement vous rend plus efficace &lt;strong&gt;sur la journée&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;la pause de 5 minutes n&amp;rsquo;est pas suffisamment longue pour vous rendre inefficace en reprenant le travail. Surtout que cette pause programmée ne vous déconcentre pas car &lt;strong&gt;vous arrêtez non pas par fatigue mais par choix&lt;/strong&gt;. Et oui, en reprenant le travail, vous n&amp;rsquo;avez rien perdu de votre concentration, il ne faut pas 10 minutes pour reprendre le fil de vos pensées, mais seulement quelques secondes.&lt;/li&gt;
&lt;li&gt;découper votre journée par tranche de 30 minutes ne veut pas dire que vous ne dépassez pas 30 minutes par tâches ! Rien ne vous interdit de passer 2 heures, ou 3, ou 4 ! Mais la, on voit &lt;strong&gt;le temps passer&lt;/strong&gt;. On sait parfaitement que l&amp;rsquo;on vient de passer 2 heures sur ce foutu rapport car c&amp;rsquo;est la 4ème pause.&lt;/li&gt;
&lt;li&gt;enfin, un avantage intéressant et non visible au départ et la possibilité de &lt;strong&gt;laisser passer un tour&lt;/strong&gt;. Au mileu d&amp;rsquo;un travail j&amp;rsquo;ai envie de faire une pause, par exemple pour répondre à ce mail important ou alors lire Twitter. Au lieu de se sentir coupable de laisser une tâche, je me donne un tour (25 minutes) pour cela, en me disant que je reprendrais le travail aprés. Cela semble un poil stupide, mais ça marche pour moi.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Voila un résumé sur l&amp;rsquo;avantage que je vois à Pomodoro. Il m&amp;rsquo;arrive encore d&amp;rsquo;oublier de lancer l&amp;rsquo;application le matin en arrivant au travail et je constate la différence. Pour moi c&amp;rsquo;est dorénavant jamais sans mon Pomodoro.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>